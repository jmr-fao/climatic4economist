{
  "hash": "309fdd660d14bc159b9c641b2d879e9f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"0: Reminder of some R concepts\"\nnumber-sections: false\n---\n\n\n\n<br>\n\n## New to R? Read this before the tutorials!\n### How to set up a working directory\nA working directory is the folder where R reads and saves files by default.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replace the path below with your own folder path\nsetwd(\"path/to/your/folder\")\n# or\nsetwd(file.path(\"path\", \"to\", \"your\", \"folder\"))\n\n# Confirm the working directory is set\ngetwd()\n```\n:::\n\n\n\n::: {.callout-note}\nAlternatively you can create an **R Project**\n:::\n\n<br>\n\n### R Project\nAn **R Project**  is a simple way to organize your work in RStudio or R.  \nIt automatically sets your working directory to the project folder, making your workflow smoother and reproducible.\n\n**R Project** has a particular type of extension `.Rproj`, and usually has this icon: ![](images/project_directory_logo.png){width=0.8in}\n\n1. Step 1 - creates a `.Rproj` file in your project folder\n\n    - In **RStudio**, go to **File > New Project...**  \n    - Choose **New Directory** or **Existing Directory** (if you already have a folder ready)  \n    - Give your project a name and location  \n    - Click **Create Project**  \n\n2. Step 2: Open Your R Project\n\n    - Double-click the `.Rproj` file or open it from RStudio's **Recent Projects**  \n    - The working directory is automatically set to the project folder\n\n::: {.callout-note}\n**R Project** have their own custom options, you can modify them trhought the global option window\n:::\n\n<br>\n\n### The pipe command\n\nThe pipe command `|>`. It lets you pass the result of one expression as the first argument to the next, creating a fluid chain of functions.\n\nInstead of nesting functions inside each other, you can pipe the output forward, making the code easier to read.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4 |> log() |> exp()\n\nexp(log(4))\n```\n:::\n\n\n\n::: {.callout-note}\n\n* The base R pipe `|>` was introduced in R 4.1.0.\n\n* In some tutorials, you might also see `%>%`, which comes from the `magrittr` or `dplyr` packages. Both do a similar thing, but `|>` is now the official base R version.\n:::\n\n<br>\n\n### The package namespaces\n\nThe package namespaces `package_name::function_name()`. As the name suggests, namespaces provide \"spaces\" for \"names\". They provide a context for looking up the value of an object associated with a name. When we write `terra::vect()` we are asking R to look for the function `vect()` in the `terra` package.\n\nIt's a fairly advanced topic, and by-and-large, not that important! When you first start using namespaces, it'll seem like a lot of work for little gain. However, having a high quality namespace helps encapsulate your package and makes it self-contained. This ensures that other packages won't interfere with your code, that your code won't interfere with other packages, and that your package works regardless of the environment in which it's run.\n\nYou can avoid using every time the name space by just loading the necessary packages at the beginning of the code (in the set up section for example). This is the most known and common approach. To do so just add `library(name_of_package)`, for example `library(terra)`. Then we can just call the function without the name space, like this `vect()`.\n\n<br>\n\n### The assign operator\n\nThe assign operator `<-`. This is a peculiarity of R and it is used to assign values to variables. However, `<-` is preferred in R scripts because it makes assignments visually distinct from comparisons (`==`) and function arguments (`=`).\n\nNote that the operators `<-` and `=` can be used, almost interchangeably. However, inside function calls, you should use `=` to name arguments, in some situations it creates unintended results.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# wrong\navg <- mean(x, na.rm <- TRUE)\n\n# correct\navg <- mean(x, na.rm = TRUE)\n```\n:::\n\n\n\n\n<br>\n\n### Functions\nIn Stata, you're used to running do-files or programs to automate tasks. In R, functions play a similar role: they help you organize code and reuse it easily.\n\nA function in R looks like this:\n\n\n::: {.cell labek='fn_body'}\n\n```{.r .cell-code}\nmy_function <- function(input1, input2) {\n  # Do something with the inputs\n  result <- input1 + input2\n  return(result)\n}\n```\n:::\n\n\n\n* `my_function` is the function's name.\n\n* `function(input1, input2)` defines what inputs (arguments) it takes.\n\n* Inside `{}`, you write the code that runs when you call the function.\n\n* `return(result)` tells R what the output should be.\n\nYou call the function like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_function(3, 5)\n# Output: 8\n```\n:::\n\n\n\nNote that you can change the order of the inputs if you properly label them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_function(input2 = 5, input1 = 3)\n# Output: 8\n```\n:::\n\n\n\nKey points for Stata users:\n\n* Functions in R must be assigned to a name using `<-` (the assignment operator).\n\n* You can think of functions a little like Stata's program define, but in R, every function can return a value to be used later.\n\n* You can nest functions inside other functions, making your analysis scripts cleaner and easier to read.\n\n* Evry time you are copying and paste a chuck of code, it is an occasion to write the function.\n<br><br>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}