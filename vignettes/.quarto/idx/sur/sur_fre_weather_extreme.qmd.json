{"title":"Compute Frequentist Weather Extreme Indicators","markdown":{"yaml":{"title":"Compute Frequentist Weather Extreme Indicators","author":"JMR","format":{"html":{"self-contained":true,"code-tools":true,"toc":true,"toc-expand":1,"toc-depth":2,"toc-location":"right-body"}},"editor":"source","editor_options":{"chunk_output_type":"console"},"vignette":"%\\VignetteIndexEntry{Vignette's Title} %\\VignetteEncoding{UTF-8} %\\VignetteEngine{quarto::html}\n"},"headingText":"Is this guide for me?","containsRefs":false,"markdown":"\n\nThis guide provides a step-by-step approach to compute the frequentist weather extreme indicators based on survey locations. The target audience includes economists who may have experience with statistical software (e.g. STATA) but are less familiar with R.\n\n## Overview of Steps\n\nIn this guide, we will go through the following steps:\n\n1.  Load the data\n2.  Prepare the data\n3.  Find the weather extreme events with absolute threshold\n4.  Find the weather extreme events with relative threshold\n5.  Merge the weather extreme events with the survey\n6.  Summarize the weather extreme events into indicators\n7.  Save the results.\n\n## What do I need before starting?\nThe following R packages are necessary: `tidyverse`, `haven`, `furrr`, `clock`, and script `functions.R`, which contain the wrapped specific functions. To install the above package you can use `install.packages(\"name_of_package\")`, don't forget the `\"`.\n\n# Code\n## Set Up\n\nIn the setup, we create the paths to the various data sources and load the necessary functions for extraction.\n\n```{r set_up}\n#| label: set_up\n\n# paths\npath_to_data_processed <- file.path(\"..\",\n                                    \"data\")\npath_to_pre_survey <- file.path(path_to_data_processed, \"pre_day_survey.dta\")\n\n# load wrapper functions\nsource(\"functions.R\")\n\n```\n\n## Load the data\n\nWe expect to already have the precipitation time series associated with the household of the survey. This data is stored as `dta` files, so we use the `haven::read_dta()` function to read it.\n\nWe can see how the data is in wide format: the columns refer to dates.\n\n```{r read_surveys}\n#| label: read_surveys\n\nsurvey <- haven::read_dta(path_to_pre_survey)\n\nsurvey\n```\n\n## Prepare the data\n```{r unique_values}\nn_hh <- nrow(survey)\nn_hh\n\nn_locations <- unique(survey$ID) |> \n  length()\nn_locations\n\nn_cells <- survey |>\n    dplyr::distinct(x_cell, y_cell) |>\n    nrow()\nn_cells\n```\n\nIn the survey there are `r n_hh` household, but some of them share the same location. Indeed the number of unique location is `r n_locations`. Further, some of these location have the same weather observations. The actual unique weather observations is `r n_cells`.\n\nComputing the weather extreme indicators can be computationally intensive, especially if we need to do it for each households. However, we now that there actually only `r n_cells` distinct weather time series, so we compute the indicators only for these ones. We prepare the data with the `prepare_coord()` function, which creates an `ID` column that identifies the unique location.\n\n```{r prep_coord}\n#| label: prep_coord\n\ncoord <- prepare_coord(survey,\n                       lat_var = y_cell, \n                       lon_var = x_cell)\n\ncoord\n```\n\n## Find absolute weather extreme events\nWe start by identifying days that experienced an extreme weather event using the function `find_abs_ext_day()`. This function determines which days had extreme precipitation based on absolute threshold values, which can be set arbitrarily. \n\nA common lower threshold for counting dry days (days without precipitation) is 0.1 mm/day. However, stricter thresholds can be applied if needed. \n\nFor upper thresholds, typical values include 10 mm/day for heavy precipitation and 20 mm/day for very heavy precipitation. Given the climate of our study area, Suriname, which has a Tropical Rainforest climate with high temperatures and abundant rainfall year-round, we include two additional upper thresholds to capture more extreme precipitation events.\n\n>These thresholds are absolute, meaning they are the same across all locations and usually they are choosen based on biophysical threshold linked to the application. Moreover, having a clear threshold, shared by all, it favours the interpretation of the result. However, a common threshold is useful if the locations of the application are very similar among themself from a climatic point of view. If the locations are climatically different, a threshold that is extreme in one location can be the normality in another location, so finding a common absolute trheshold can be challenging.\n\nWe have precipitation observations that started in 1981, however we are not interested into looking for extreme events that happened so far back in time. To limit the analysis to a specific time range, we use the function `select_by_dates()`. The functions requires either or both of the parameters, `from` (starting date) and `to` (end date). If both are provided, the function selects dates within that range. If only `from` is specified, it selects all dates after that point. If only `to` is provided, it selects all dates before that point. This can be useful also if we are just interested in a precise time rage, to see if the data is able to detect a known weather event.\n\nIn other application we can be interested in a precise season of the year, like the agricultural one. To select between two dates but across multiple years we can use the function `select_by_season()`. Also in this case we need to provide two arguments: `from` (starting date) and `to` (end date). The format of these two arguments is `\"mm-dd\"`, like `\"04-15\"` for April the 15th.\n\n```{r select_dates}\n#| label: select_dates\n\ncoord_12_23  <- select_by_dates(coord, from = \"2012-01-01\", to = \"2023-01-01\") \ncoord_12_23\n```\n\nLet's select some upper thresholds, which means we are looking for weather events that are above these thresholds. Additionally, we could have added also some lower thresholds for weather events that are below these thresholds.\n\nThe argument `unit` specifies the unit of measure of the weather observation, e.g. `\"mm\"` for precipitation, `\"C\"` for temperature. It does not have implication for the computations but it labels the result accordingly.\n\n```{r find_day_pre}\n#| label: find_day_pre\n\nupper_thresh = c(20, 30, 40)\nextr_day_abs <- find_abs_ext_day(coord_12_23,\n                                 u_thresh = upper_thresh,\n                                 unit = \"mm\")\n```\n\nThe `find_abs_ext_day()` function creates several columns to the dataset:\n\n* The column `mm` represents the daily precipitation amount.\n\n* The columns that start with `day_abv_`: these indicate whether the daily precipitation was above the upper threshold.\n\n* If we had added also the lower thresholds the result would have had other columns that start with `day_blw_`: these indicate whether the daily precipitation was below the lower threshold.\n\n* The columns that start with `mm_abv_`: these indicate the amount of daily precipitation that exceeded the upper threshold. If the precipitation was below the upper threshold, the value is zero.\n\n* Similarly, if we had added also the lower thresholds we would have had also `mm_blw` the lower thresholds.\n\n```{r print_abs_day}\n#| label: print_abs_day\n\nextr_day_abs |>\n  dplyr::select(ID, date, mm, dplyr::starts_with(\"day\"))\n\nextr_day_abs |>\n  dplyr::select(ID, date, mm, dplyr::starts_with(\"mm\"))\n```\n\nTo find consecutive days of extreme observations we can use the function `find_abs_extr_spell()`. This function look for consecutive days that are more extreme than the thresholds.\n\nIn this application we look for dry spell, i.e. consecutive days without precipitation. A common threshold for dry days is 0.1 mm/day. Therefore any days with a precipitation below 0.1 mm is considered dry. We set 0.1 as lower threshold of the function through the argument `l_thresh`. We can set even more stringent thresholds or even upper thresholds, for consecutive days of weather above the threshold.\n\nThe argument `min_spell` sets the minimum consecutive days required to define a spell. The default value is two, but another values are possible. A common value is five, so we need to have at least five consecutive dry days to have a dry spell.\n\n```{r find_abs_spell}\n#| label: find_abs_spell\n\nlower_thresh = c(0.1)\nextr_spell_abs <- find_abs_extr_spell(coord_12_23,\n                                      l_thresh = lower_thresh,\n                                      min_spell = 2)\n```\n\nThe result of the `find_abs_extr_spell()` function contains:\n\n* the column `value` is the weather observation.\n\n* columns that start with `spell_blw_`: these indicate the number of consecutive days with precipitation below the lower threshold. These columns contain values only on the last consecutive day of a spell, with `NA` for other days.\n\n* columns that start with `spell_abv_`: these indicate the number of consecutive days with precipitation above the upper threshold. These columns contain values only on the last consecutive day of a spell, with `NA` for other days. Actually, we don't have them as we haven't specified the upper threshold.\n\n```{r print_abs_spell}\n#| label: print_abs_spell\n\nextr_spell_abs\n```\n\n## Create the relative threshold\n>If we believe the thresholds shouldn't be the same across all the location but instead be adaptive to the local long run climatic condition we should use the relative thresholds. In this case the thresholds varies for each location, adapting to the local climatic features and making the spatial comparison among heterogeneous places more meaningful. The relative approach measures the extreme weather events in term of their rarity, which is measured by the percentile of their local and seasonal distribution.\n\nTherefore, as first step we need to calculate the weather distribution in each survey location and for each month.\n\nFor the precipitation we can use the `calc_pct_day()` functions. The function looks for the unique `ID` occurrences, which we previously computed with the function `prepare_coord()`. Just as reminder, the `ID`s refers to the unique time series of observations.\n\n>Usually, the percentile on precipitation are calculated based on wet days.\n\nWe can select the threshold for dry days with the argument `l_thresh`. We use the more traditional dry day threshold of 0.1 mm/day. However, other thresholds can be used and upper threshold as well with the input `u_thresh`. Note that these thresholds can be used as lower and upper bounds for the threshold. For example, by setting the lower threshold at 0.1 mm/day we ensure that the percentiles will not below it, and if no observation satisfy the threshold (like in very dry season where there is no precipitation at all) the percentile will be the lower threshold itself.\n\nWe can specify the percentiles we want to compute with the argument `p`. Common values are the 95th and 99th percentiles. We can interpret these thresholds as the level of rarity of a particular extreme events. For example, with the 95th percentile we have five percent of probability to observe some weather realization above this threshold.\n\nThe first two columns of the result identify the unique location and the month. The month is important as we compute the  statistic for each month to account for climatic seasonality.\n\n>Note that even if we compute the statitics for each month the unit of measure for is still mm per day for precipitation.\n\n\n```{r compute_percentiles_pre}\n#| label: compute_percentiles_pre\n\npercentile_pre <- calc_pct_day(coord,\n                               p = c(0.95, 0.99),\n                               l_thresh = 0.1)\n\npercentile_pre\n```\n\nWe can now do the same for the dry spells, by using the function `calc_pct_spell()`.\n\n>The dry spells statistics are assigned to the month in which the dry spell ends. The unit of measure of the dry spells is day. \n\nSimilar to the previous results, the first two columns of the result identify the unique location and the month. Then, we have the monthly average length of the dry spells, the monthly standard deviation, and the monthly length thresholds we asked for.\n\n```{r compute_percentiles_spell}\n#| label: compute_percentiles_spell\n\npercentile_spell <- calc_pct_spell(coord, \n                                   l_thresh = 0.1,\n                                   p = c(0.95, 0.99))\n\npercentile_spell\n```\n\n## Find relative weather extreme events\nNow that we have the relative thresholds we can now look for the extreme weather events. The function `find_rel_extr_day()` does it for us. \n\nThe function requires the weather observations and the relative thresholds we want to use. Additionally we can provide also the unit of measure with the argument `unit`. This has no computational implication but it labels the result accordingly.\n\n```{r find_rel_ext_day}\n#| label: find_rel_ext_day\n\ncoord_12_23  <- select_by_dates(coord, from = \"2012-01-01\", to = \"2023-01-01\") \n\nextr_day_rel <- find_rel_extr_day(coord_12_23,\n                                  u_thresh = percentile_pre,\n                                  unit = \"mm\")\n```\n\n\nThe function returns two set of variables. \n\n* The variables that start with `pre_abv_` tells us if that day the precipitation was above the monthly percentile indicated by the number.\n* The variables that start with `mm_abv_` tells us by how much the daily precipitation exceeded the monthly percentile indicated by the number.\n\nThe variables that contain `_max_` tells us if that day the precipitation was above the highest among the monthly percentiles. This means that the percentile is not specific for the month but it is the highest of the year. In other words, it doesn't take into consideration seasonality but always compare with the extreme of the month with most abundant precipitation. This is useful if we want to consider an implicit lower bound for precipitation. For example, in places with strong dry season, where usually no precipitation at all fall, even small amount can be considered extreme. However, these amounts are too small to affect significantly the households.\n\n\n```{r print_rel_ext_day}\n#| label: print_rel_ext_day\n\nextr_day_rel |>\n  dplyr::select(ID, date, mm, dplyr::starts_with(\"day\")) |>\n  print(n = 10)\n\nextr_day_rel |>\n  dplyr::select(ID, date, mm, dplyr::starts_with(\"mm\")) |>\n  print(n = 10)\n```\n\nWe can now do the same for the dry spells, by using the function `find_rel_extr_spell()`. The function requires the precipitation observations and the relative thresholds we want to use. The function understands the thresholds used to calculate the spells percentiles and applies the same thresholds for calculating the new spells for the comparison.\n\nThe result tells us by how many days the dry spell exceeded the monthly percentile length indicated by the number. Days with `NA` values are days without any ending dry spell exceeding the thresholds. We do a focus to see that there is actually non `NA` values. A value of zero means that the spell exactly matches the thresholds.\n\n```{r find_rel_ext_spell}\n#| label: find_rel_ext_spell\n\nrel_extr_spell <- find_rel_extr_spell(coord_12_23,\n                                      percentile_spell)\n\nrel_extr_spell |>\n  print(n = 5)\n\nrel_extr_spell |>\n  dplyr::filter(spell_blw_0.1_99p >= 0) |>\n  print(n = 5)\n```\n\n\n## Merge with the survey\nNext, we merge the extreme weather events. This step is essential because we need the household interview dates to assign the correct extreme event data. We achieve this using the function `merge_with_survey()`, which matches records based on the `ID` column.\n\nIf we want to select only a subset of observations, we can use the `filter_by_interview()` function. This function requires specifying the variable that contains the interview dates and defining the selection interval. The interval can be expressed in months or years, and move backwards starting form the date of interview.\n\n>Note that the current version of `filter_by_interview()` drops the observation with missing date of interview.\n\n```{r merge_abs_ext_event}\n#| label: merge_abs_ext_event\n\nabs_ext_day_survey <- merge_with_survey(coord, extr_day_abs)\nabs_ext_day_survey\n# filter_by_interview(abs_extreme_survey,\n#                     interview = end_date_n,\n#                     interval = \"1 year\")\n\nabs_ext_spell_survey <- merge_with_survey(coord, extr_spell_abs)\nabs_ext_spell_survey\n```\n\n```{r merge_rel_ext_event}\n#| label: merge_rel_ext_event\nrel_ext_day_survey <- merge_with_survey(coord, extr_day_rel)\nrel_ext_day_survey\n\n\nrel_extr_spell_survey <- merge_with_survey(coord, rel_extr_spell)\nrel_extr_spell_survey\n```\n\n## Summarise the weather extreme into indicators\nWe can now summarize the absolute extreme precipitation events to create precipitation weather extreme indicators with the function `extr_day_index()` for single day weather extreme and the function `extr_spell_index()` for consecutive days. \n\nTo do this, we need to specify the reference period and the number of lagged reference periods to include. In this case, we set the reference period to `\"1 year\"`, meaning we calculate the extreme indicators over one year before the interview. The `n_lags` parameter determines how many reference periods we go back for the calculation. The `n_lags` works like this:\n\n* 0, refers to the year before the interview.\n\n* 1, refers to the second year before the interview.\n\n* 2, refers to third year before the interview.\n\n* and so on.\n\nThe `interview` argument identifies the column containing the interview date, which serves as the starting point for calculating the reference period. All observations after the interview date are discarded. Finally, the `id` argument specifies the column containing the unit ID.\n\nThis function makes some check on the good formatting of the dates, which takes time, so we need to be a little patient in waiting for the results. Moreover, given the possibility that each household was interview in a different day and a different location we need to use the full survey dataset, which greatly increase the computation efficiency.\n\n```{r extr_day_index}\n#| label: extr_day_index\n\nabs_extr_day_index <- extr_day_index(abs_ext_day_survey,\n                                    interview = end_date_n,\n                                    id = hhid,\n                                    interval = \"1 year\",\n                                    n_lags = 1)\n\nrel_extr_day_index <- extr_day_index(rel_ext_day_survey,\n                                     interview = end_date_n,\n                                     id = hhid,\n                                     interval = \"1 year\",\n                                     n_lags = 1)\n\n```\n\nThe first two columns of the result are the household `hhid` and the lag reference period.\nThe other columns contains:\n\n* `day_abv_X_sum`: number of days with the weather observation above the `X` threshold.\n* `mm_abv_X_sum`: sum of millimeter above the threshold.\n\nNote that if we had added also days below the threshold we would have got also `day_blw_X_sum` and `mm_blw_X_sum`, which are number of days with the weather observation below the `X` threshold and the sum of millimeter below the threshold.\n\nMoreover, we got `mm_abv_X_sum` because we set `\"mm\"` for the `unit` argument in the `find_abs_extr_day()` functions. Any change to this argument will be reflected also in the results.\n\n```{r print_extr_day_index}\n#| label: print_extr_day_index\n\nabs_extr_day_index\n\nrel_extr_day_index\n```\n\nThe function `extr_spell_index()` require the same arguments of the `extr_day_index()`, just be aware of using the weather extreme spells data.\n\n```{r extr_spell_index}\n#| label: extr_spell_index\n\nabs_extr_spell_index <- extr_spell_index(abs_ext_spell_survey,\n                                         interview = end_date_n,\n                                         id = hhid,\n                                         interval = \"1 year\",\n                                         n_lags = 1)\n\nrel_extr_spell_index <- extr_spell_index(rel_extr_spell_survey,\n                                         interview = end_date_n,\n                                         id = hhid,\n                                         interval = \"1 year\",\n                                         n_lags = 1)\n```\n\n\nThe first two columns of the result are the household `hhid` and the lag reference period.\nThe other columns contains:\n\n* `spell_blw_X_max`, the length of consecutive day with weather below the `X` threshold.\n* `spell_blw_X_mean`, the average length of consecutive day with weather below the `X` threshold.\n* `spell_blw_X_sum` , the sum of the lengths of all consecutive days with weather below the `X` threshold.\n* `spell_blw_X_n`, the number of spells tat satisfy the `X` threshold.\n\nNote that if we had added also days above the threshold we would have got also `spell_abv_X_max` and so on, which refer to consecutive days with weather above the `X` threshold.\n\n\n```{r print_extr_spell_index}\n#| label: print_extr_spell_index\n\nabs_extr_spell_index\nrel_extr_spell_index\n```\n\n## Save\nThe final step of the code is to save the result. In this case, we save it as a `dta` file using the `haven::write_dta()` function. STATA doesn't allow variables name with `.` in it or that start with a number. Therefore, before saving the result we rename the columns with `.`, by removing the dot. This passage is performed by the `dplyr::rename_with()` function.\n\n```{r write_data}\n#| label: write_data\n\nabs_extr_spell_index |>\n  dplyr::rename_with(.fn = ~ gsub(\"\\\\.\", \"\", .x)) |>\n  haven::write_dta(file.path(path_to_data_processed, \"abs_extr_spell_index.dta\"))\n\nrel_extr_spell_index |>\n  dplyr::rename_with(.fn = ~ gsub(\"\\\\.\", \"\", .x)) |>\n  haven::write_dta(file.path(path_to_data_processed, \"rel_extr_spell_index.dta\"))\n\nabs_extr_day_index |>\n  haven::write_dta(file.path(path_to_data_processed, \"abs_extr_day_index.dta\"))\n\nrel_extr_day_index|>\n  haven::write_dta(file.path(path_to_data_processed, \"rel_extr_day_index.dta\"))\n```\n\n# Take home messages\n\n1.  Work with `dta`! We can read `dta` files with `haven::read_dta()` and write files with `haven::write_dta()`. To work with STATA labels check out the `labelled` package.\n\n2.  Prepare the data! There are many repetitions in the data for which we don't need to calculate the weather extremes. We can use the wrapper function `prepare_coord()` to identify the unique locations and to distinguish then with a variable `ID`. \n\n3.  Find the weather extreme events! There are two approaches:\n\n    * Absolute thresholds. They are the same across all location and across all months. They have an easy interpretation as they are linked to biophysical thresholds to define what is extreme. Use the wrapper function `find_abs_ext_day()` to look for extreme days and the function `find_abs_extr_spell()` to look for consecutive occurrences.\n  \n    * Relative thresholds. They are location and monthly specific thresholds. They measures extreme based on the rarity of occurrence and are usually defined as the percentile of the weather distribution. Use the wrapper function `calc_pct_day()` to calculate daily percentiles and the wrapper function `calc_pct_spell()` to calculate the percentiles of consecutive weather events. Based on these percentile we can find the extreme events with the wrapper functions `find_rel_ext_day()` and `find_rel_extr_spell()`.\n\n4. As a final step we need to summaries the weather extreme events into some indicators. For this passage is essential to define the correct reference period with, usually, depends on the date of interview and the interval before the date of interview. Therefore, we need to merge the weather extreme observation with the survey with the wrapper function `merge_with_survey()`. Then the summary passage is carried out by the wrapper function `extr_day_index()` and `extr_spell_index()`, respectively for summarize daily weather extreme events and spell weather extreme events.\n\n# Appendix\n## New to R? Read this first!\n\n### The pipe command\n\nThe pipe command `|>`. It lets you pass the result of one expression as the first argument to the next, creating a fluid chain of functions.\n\n### The package namespaces\n\nThe package namespaces `package_name::function_name()`. As the name suggests, namespaces provide \"spaces\" for \"names\". They provide a context for looking up the value of an object associated with a name. When we write `terra::vect()` we are asking R to look for the function `vect()` in the `terra` package.\n\nIt's a fairly advanced topic, and by-and-large, not that important! When you first start using namespaces, it'll seem like a lot of work for little gain. However, having a high quality namespace helps encapsulate your package and makes it self-contained. This ensures that other packages won't interfere with your code, that your code won't interfere with other packages, and that your package works regardless of the environment in which it's run.\n\nYou can avoid using every time the name space by just loading the necessary packages at the beginning of the code (in the set up section for example). This is the most known and common approach. To do so just add `library(name_of_package)`, for example `library(terra)`. Then we can just call the function without the name space, like this `vect()`.\n\n### The assign operator\n\nThe assign operator `<-`. This is a peculiarity of R and it is used to assign values to variables. Note that the operators `<-` and `=` can be used, almost interchangeably.\n\n## Want to know about the data?\n### Precipitation\nDaily precipitation from Climate Hazards Group InfraRed Precipitation with Station data (CHIRPS)[^1] is a 35+ year quasi-global rainfall data set. Spanning 50°S-50°N (and all longitudes) and ranging from 1981 to near-present, CHIRPS incorporates in-house climatology, CHPclim, 0.05° resolution satellite imagery, and in-situ station data to create gridded rainfall time series for trend analysis and seasonal drought monitoring. \n\nData can be downloaded from [here](https://data.chc.ucsb.edu/products/CHIRPS-2.0/global_monthly/netcdf/) while extra information are available [here](https://www.chc.ucsb.edu/).\n\n[^1]: Funk, C.C., Peterson, P.J., Landsfeld, M.F., Pedreros, D.H., Verdin, J.P., Rowland, J.D., Romero, B.E., Husak, G.J., Michaelsen, J.C., and Verdin, A.P., 2014, A quasi-global precipitation time series for drought monitoring: U.S. Geological Survey Data Series 832, 4 p. http://pubs.usgs.gov/ds/832/\n\n| feature             | value                 |\n|:--------------------|:----------------------|\n| spatial resolution  | 0.05 x 0.05 (\\~ 5 km) |\n| temporal resolution | monthly or daily      |\n| temporal frame      | 1981 - near present   |\n| unit of measure     | mm/day                |\n\n### Surveys\nSuriname Survey of Living Conditions. The 2022 Suriname Survey of Living Conditions is a joint survey made by The Inter-American Development Bank (IDB) and the World Bank. The 2022 Suriname Survey of Living Conditions - administered to a nationally representative sample, which included 7,713 individuals from 2,540 households - was developed to support poverty analysis as well as policy planning and is a helpful tool for policy makers to facilitate fact-based decision making. The survey’s design and execution were financed by the IDB, while the World Bank and IDB are joining forces to analyze data and produce initial findings.\n\nThe Suriname Survey of Living Conditions (SSLC) 2016/17 is an effort of the Inter-American Development Bank (IDB) with the support of the EnergieBedrijvan Suriname’s (state-owned electrical company of Suriname) and the Central Bank of Suriname. It visited about 2,000 households from October 2016 through September 2017 and collected data on the most important dimensions of welfare, which will support evidence-based policy making in areas such as education, health, housing, employment and poverty alleviation. The survey also gathered information on the consumption patterns, income and expenditures of the Surinamese households, intended to update the Consumption Price Index basket and inform the System of National Accounts. \n\nFor extra info look [here](https://openknowledge.worldbank.org/entities/publication/2d0e6975-2f85-4d12-83fa-4f75c617cf89) and [here](https://webapps.ilo.org/surveyLib/index.php/catalog/7499).\n\n","srcMarkdownNoYaml":"\n\n## Is this guide for me?\nThis guide provides a step-by-step approach to compute the frequentist weather extreme indicators based on survey locations. The target audience includes economists who may have experience with statistical software (e.g. STATA) but are less familiar with R.\n\n## Overview of Steps\n\nIn this guide, we will go through the following steps:\n\n1.  Load the data\n2.  Prepare the data\n3.  Find the weather extreme events with absolute threshold\n4.  Find the weather extreme events with relative threshold\n5.  Merge the weather extreme events with the survey\n6.  Summarize the weather extreme events into indicators\n7.  Save the results.\n\n## What do I need before starting?\nThe following R packages are necessary: `tidyverse`, `haven`, `furrr`, `clock`, and script `functions.R`, which contain the wrapped specific functions. To install the above package you can use `install.packages(\"name_of_package\")`, don't forget the `\"`.\n\n# Code\n## Set Up\n\nIn the setup, we create the paths to the various data sources and load the necessary functions for extraction.\n\n```{r set_up}\n#| label: set_up\n\n# paths\npath_to_data_processed <- file.path(\"..\",\n                                    \"data\")\npath_to_pre_survey <- file.path(path_to_data_processed, \"pre_day_survey.dta\")\n\n# load wrapper functions\nsource(\"functions.R\")\n\n```\n\n## Load the data\n\nWe expect to already have the precipitation time series associated with the household of the survey. This data is stored as `dta` files, so we use the `haven::read_dta()` function to read it.\n\nWe can see how the data is in wide format: the columns refer to dates.\n\n```{r read_surveys}\n#| label: read_surveys\n\nsurvey <- haven::read_dta(path_to_pre_survey)\n\nsurvey\n```\n\n## Prepare the data\n```{r unique_values}\nn_hh <- nrow(survey)\nn_hh\n\nn_locations <- unique(survey$ID) |> \n  length()\nn_locations\n\nn_cells <- survey |>\n    dplyr::distinct(x_cell, y_cell) |>\n    nrow()\nn_cells\n```\n\nIn the survey there are `r n_hh` household, but some of them share the same location. Indeed the number of unique location is `r n_locations`. Further, some of these location have the same weather observations. The actual unique weather observations is `r n_cells`.\n\nComputing the weather extreme indicators can be computationally intensive, especially if we need to do it for each households. However, we now that there actually only `r n_cells` distinct weather time series, so we compute the indicators only for these ones. We prepare the data with the `prepare_coord()` function, which creates an `ID` column that identifies the unique location.\n\n```{r prep_coord}\n#| label: prep_coord\n\ncoord <- prepare_coord(survey,\n                       lat_var = y_cell, \n                       lon_var = x_cell)\n\ncoord\n```\n\n## Find absolute weather extreme events\nWe start by identifying days that experienced an extreme weather event using the function `find_abs_ext_day()`. This function determines which days had extreme precipitation based on absolute threshold values, which can be set arbitrarily. \n\nA common lower threshold for counting dry days (days without precipitation) is 0.1 mm/day. However, stricter thresholds can be applied if needed. \n\nFor upper thresholds, typical values include 10 mm/day for heavy precipitation and 20 mm/day for very heavy precipitation. Given the climate of our study area, Suriname, which has a Tropical Rainforest climate with high temperatures and abundant rainfall year-round, we include two additional upper thresholds to capture more extreme precipitation events.\n\n>These thresholds are absolute, meaning they are the same across all locations and usually they are choosen based on biophysical threshold linked to the application. Moreover, having a clear threshold, shared by all, it favours the interpretation of the result. However, a common threshold is useful if the locations of the application are very similar among themself from a climatic point of view. If the locations are climatically different, a threshold that is extreme in one location can be the normality in another location, so finding a common absolute trheshold can be challenging.\n\nWe have precipitation observations that started in 1981, however we are not interested into looking for extreme events that happened so far back in time. To limit the analysis to a specific time range, we use the function `select_by_dates()`. The functions requires either or both of the parameters, `from` (starting date) and `to` (end date). If both are provided, the function selects dates within that range. If only `from` is specified, it selects all dates after that point. If only `to` is provided, it selects all dates before that point. This can be useful also if we are just interested in a precise time rage, to see if the data is able to detect a known weather event.\n\nIn other application we can be interested in a precise season of the year, like the agricultural one. To select between two dates but across multiple years we can use the function `select_by_season()`. Also in this case we need to provide two arguments: `from` (starting date) and `to` (end date). The format of these two arguments is `\"mm-dd\"`, like `\"04-15\"` for April the 15th.\n\n```{r select_dates}\n#| label: select_dates\n\ncoord_12_23  <- select_by_dates(coord, from = \"2012-01-01\", to = \"2023-01-01\") \ncoord_12_23\n```\n\nLet's select some upper thresholds, which means we are looking for weather events that are above these thresholds. Additionally, we could have added also some lower thresholds for weather events that are below these thresholds.\n\nThe argument `unit` specifies the unit of measure of the weather observation, e.g. `\"mm\"` for precipitation, `\"C\"` for temperature. It does not have implication for the computations but it labels the result accordingly.\n\n```{r find_day_pre}\n#| label: find_day_pre\n\nupper_thresh = c(20, 30, 40)\nextr_day_abs <- find_abs_ext_day(coord_12_23,\n                                 u_thresh = upper_thresh,\n                                 unit = \"mm\")\n```\n\nThe `find_abs_ext_day()` function creates several columns to the dataset:\n\n* The column `mm` represents the daily precipitation amount.\n\n* The columns that start with `day_abv_`: these indicate whether the daily precipitation was above the upper threshold.\n\n* If we had added also the lower thresholds the result would have had other columns that start with `day_blw_`: these indicate whether the daily precipitation was below the lower threshold.\n\n* The columns that start with `mm_abv_`: these indicate the amount of daily precipitation that exceeded the upper threshold. If the precipitation was below the upper threshold, the value is zero.\n\n* Similarly, if we had added also the lower thresholds we would have had also `mm_blw` the lower thresholds.\n\n```{r print_abs_day}\n#| label: print_abs_day\n\nextr_day_abs |>\n  dplyr::select(ID, date, mm, dplyr::starts_with(\"day\"))\n\nextr_day_abs |>\n  dplyr::select(ID, date, mm, dplyr::starts_with(\"mm\"))\n```\n\nTo find consecutive days of extreme observations we can use the function `find_abs_extr_spell()`. This function look for consecutive days that are more extreme than the thresholds.\n\nIn this application we look for dry spell, i.e. consecutive days without precipitation. A common threshold for dry days is 0.1 mm/day. Therefore any days with a precipitation below 0.1 mm is considered dry. We set 0.1 as lower threshold of the function through the argument `l_thresh`. We can set even more stringent thresholds or even upper thresholds, for consecutive days of weather above the threshold.\n\nThe argument `min_spell` sets the minimum consecutive days required to define a spell. The default value is two, but another values are possible. A common value is five, so we need to have at least five consecutive dry days to have a dry spell.\n\n```{r find_abs_spell}\n#| label: find_abs_spell\n\nlower_thresh = c(0.1)\nextr_spell_abs <- find_abs_extr_spell(coord_12_23,\n                                      l_thresh = lower_thresh,\n                                      min_spell = 2)\n```\n\nThe result of the `find_abs_extr_spell()` function contains:\n\n* the column `value` is the weather observation.\n\n* columns that start with `spell_blw_`: these indicate the number of consecutive days with precipitation below the lower threshold. These columns contain values only on the last consecutive day of a spell, with `NA` for other days.\n\n* columns that start with `spell_abv_`: these indicate the number of consecutive days with precipitation above the upper threshold. These columns contain values only on the last consecutive day of a spell, with `NA` for other days. Actually, we don't have them as we haven't specified the upper threshold.\n\n```{r print_abs_spell}\n#| label: print_abs_spell\n\nextr_spell_abs\n```\n\n## Create the relative threshold\n>If we believe the thresholds shouldn't be the same across all the location but instead be adaptive to the local long run climatic condition we should use the relative thresholds. In this case the thresholds varies for each location, adapting to the local climatic features and making the spatial comparison among heterogeneous places more meaningful. The relative approach measures the extreme weather events in term of their rarity, which is measured by the percentile of their local and seasonal distribution.\n\nTherefore, as first step we need to calculate the weather distribution in each survey location and for each month.\n\nFor the precipitation we can use the `calc_pct_day()` functions. The function looks for the unique `ID` occurrences, which we previously computed with the function `prepare_coord()`. Just as reminder, the `ID`s refers to the unique time series of observations.\n\n>Usually, the percentile on precipitation are calculated based on wet days.\n\nWe can select the threshold for dry days with the argument `l_thresh`. We use the more traditional dry day threshold of 0.1 mm/day. However, other thresholds can be used and upper threshold as well with the input `u_thresh`. Note that these thresholds can be used as lower and upper bounds for the threshold. For example, by setting the lower threshold at 0.1 mm/day we ensure that the percentiles will not below it, and if no observation satisfy the threshold (like in very dry season where there is no precipitation at all) the percentile will be the lower threshold itself.\n\nWe can specify the percentiles we want to compute with the argument `p`. Common values are the 95th and 99th percentiles. We can interpret these thresholds as the level of rarity of a particular extreme events. For example, with the 95th percentile we have five percent of probability to observe some weather realization above this threshold.\n\nThe first two columns of the result identify the unique location and the month. The month is important as we compute the  statistic for each month to account for climatic seasonality.\n\n>Note that even if we compute the statitics for each month the unit of measure for is still mm per day for precipitation.\n\n\n```{r compute_percentiles_pre}\n#| label: compute_percentiles_pre\n\npercentile_pre <- calc_pct_day(coord,\n                               p = c(0.95, 0.99),\n                               l_thresh = 0.1)\n\npercentile_pre\n```\n\nWe can now do the same for the dry spells, by using the function `calc_pct_spell()`.\n\n>The dry spells statistics are assigned to the month in which the dry spell ends. The unit of measure of the dry spells is day. \n\nSimilar to the previous results, the first two columns of the result identify the unique location and the month. Then, we have the monthly average length of the dry spells, the monthly standard deviation, and the monthly length thresholds we asked for.\n\n```{r compute_percentiles_spell}\n#| label: compute_percentiles_spell\n\npercentile_spell <- calc_pct_spell(coord, \n                                   l_thresh = 0.1,\n                                   p = c(0.95, 0.99))\n\npercentile_spell\n```\n\n## Find relative weather extreme events\nNow that we have the relative thresholds we can now look for the extreme weather events. The function `find_rel_extr_day()` does it for us. \n\nThe function requires the weather observations and the relative thresholds we want to use. Additionally we can provide also the unit of measure with the argument `unit`. This has no computational implication but it labels the result accordingly.\n\n```{r find_rel_ext_day}\n#| label: find_rel_ext_day\n\ncoord_12_23  <- select_by_dates(coord, from = \"2012-01-01\", to = \"2023-01-01\") \n\nextr_day_rel <- find_rel_extr_day(coord_12_23,\n                                  u_thresh = percentile_pre,\n                                  unit = \"mm\")\n```\n\n\nThe function returns two set of variables. \n\n* The variables that start with `pre_abv_` tells us if that day the precipitation was above the monthly percentile indicated by the number.\n* The variables that start with `mm_abv_` tells us by how much the daily precipitation exceeded the monthly percentile indicated by the number.\n\nThe variables that contain `_max_` tells us if that day the precipitation was above the highest among the monthly percentiles. This means that the percentile is not specific for the month but it is the highest of the year. In other words, it doesn't take into consideration seasonality but always compare with the extreme of the month with most abundant precipitation. This is useful if we want to consider an implicit lower bound for precipitation. For example, in places with strong dry season, where usually no precipitation at all fall, even small amount can be considered extreme. However, these amounts are too small to affect significantly the households.\n\n\n```{r print_rel_ext_day}\n#| label: print_rel_ext_day\n\nextr_day_rel |>\n  dplyr::select(ID, date, mm, dplyr::starts_with(\"day\")) |>\n  print(n = 10)\n\nextr_day_rel |>\n  dplyr::select(ID, date, mm, dplyr::starts_with(\"mm\")) |>\n  print(n = 10)\n```\n\nWe can now do the same for the dry spells, by using the function `find_rel_extr_spell()`. The function requires the precipitation observations and the relative thresholds we want to use. The function understands the thresholds used to calculate the spells percentiles and applies the same thresholds for calculating the new spells for the comparison.\n\nThe result tells us by how many days the dry spell exceeded the monthly percentile length indicated by the number. Days with `NA` values are days without any ending dry spell exceeding the thresholds. We do a focus to see that there is actually non `NA` values. A value of zero means that the spell exactly matches the thresholds.\n\n```{r find_rel_ext_spell}\n#| label: find_rel_ext_spell\n\nrel_extr_spell <- find_rel_extr_spell(coord_12_23,\n                                      percentile_spell)\n\nrel_extr_spell |>\n  print(n = 5)\n\nrel_extr_spell |>\n  dplyr::filter(spell_blw_0.1_99p >= 0) |>\n  print(n = 5)\n```\n\n\n## Merge with the survey\nNext, we merge the extreme weather events. This step is essential because we need the household interview dates to assign the correct extreme event data. We achieve this using the function `merge_with_survey()`, which matches records based on the `ID` column.\n\nIf we want to select only a subset of observations, we can use the `filter_by_interview()` function. This function requires specifying the variable that contains the interview dates and defining the selection interval. The interval can be expressed in months or years, and move backwards starting form the date of interview.\n\n>Note that the current version of `filter_by_interview()` drops the observation with missing date of interview.\n\n```{r merge_abs_ext_event}\n#| label: merge_abs_ext_event\n\nabs_ext_day_survey <- merge_with_survey(coord, extr_day_abs)\nabs_ext_day_survey\n# filter_by_interview(abs_extreme_survey,\n#                     interview = end_date_n,\n#                     interval = \"1 year\")\n\nabs_ext_spell_survey <- merge_with_survey(coord, extr_spell_abs)\nabs_ext_spell_survey\n```\n\n```{r merge_rel_ext_event}\n#| label: merge_rel_ext_event\nrel_ext_day_survey <- merge_with_survey(coord, extr_day_rel)\nrel_ext_day_survey\n\n\nrel_extr_spell_survey <- merge_with_survey(coord, rel_extr_spell)\nrel_extr_spell_survey\n```\n\n## Summarise the weather extreme into indicators\nWe can now summarize the absolute extreme precipitation events to create precipitation weather extreme indicators with the function `extr_day_index()` for single day weather extreme and the function `extr_spell_index()` for consecutive days. \n\nTo do this, we need to specify the reference period and the number of lagged reference periods to include. In this case, we set the reference period to `\"1 year\"`, meaning we calculate the extreme indicators over one year before the interview. The `n_lags` parameter determines how many reference periods we go back for the calculation. The `n_lags` works like this:\n\n* 0, refers to the year before the interview.\n\n* 1, refers to the second year before the interview.\n\n* 2, refers to third year before the interview.\n\n* and so on.\n\nThe `interview` argument identifies the column containing the interview date, which serves as the starting point for calculating the reference period. All observations after the interview date are discarded. Finally, the `id` argument specifies the column containing the unit ID.\n\nThis function makes some check on the good formatting of the dates, which takes time, so we need to be a little patient in waiting for the results. Moreover, given the possibility that each household was interview in a different day and a different location we need to use the full survey dataset, which greatly increase the computation efficiency.\n\n```{r extr_day_index}\n#| label: extr_day_index\n\nabs_extr_day_index <- extr_day_index(abs_ext_day_survey,\n                                    interview = end_date_n,\n                                    id = hhid,\n                                    interval = \"1 year\",\n                                    n_lags = 1)\n\nrel_extr_day_index <- extr_day_index(rel_ext_day_survey,\n                                     interview = end_date_n,\n                                     id = hhid,\n                                     interval = \"1 year\",\n                                     n_lags = 1)\n\n```\n\nThe first two columns of the result are the household `hhid` and the lag reference period.\nThe other columns contains:\n\n* `day_abv_X_sum`: number of days with the weather observation above the `X` threshold.\n* `mm_abv_X_sum`: sum of millimeter above the threshold.\n\nNote that if we had added also days below the threshold we would have got also `day_blw_X_sum` and `mm_blw_X_sum`, which are number of days with the weather observation below the `X` threshold and the sum of millimeter below the threshold.\n\nMoreover, we got `mm_abv_X_sum` because we set `\"mm\"` for the `unit` argument in the `find_abs_extr_day()` functions. Any change to this argument will be reflected also in the results.\n\n```{r print_extr_day_index}\n#| label: print_extr_day_index\n\nabs_extr_day_index\n\nrel_extr_day_index\n```\n\nThe function `extr_spell_index()` require the same arguments of the `extr_day_index()`, just be aware of using the weather extreme spells data.\n\n```{r extr_spell_index}\n#| label: extr_spell_index\n\nabs_extr_spell_index <- extr_spell_index(abs_ext_spell_survey,\n                                         interview = end_date_n,\n                                         id = hhid,\n                                         interval = \"1 year\",\n                                         n_lags = 1)\n\nrel_extr_spell_index <- extr_spell_index(rel_extr_spell_survey,\n                                         interview = end_date_n,\n                                         id = hhid,\n                                         interval = \"1 year\",\n                                         n_lags = 1)\n```\n\n\nThe first two columns of the result are the household `hhid` and the lag reference period.\nThe other columns contains:\n\n* `spell_blw_X_max`, the length of consecutive day with weather below the `X` threshold.\n* `spell_blw_X_mean`, the average length of consecutive day with weather below the `X` threshold.\n* `spell_blw_X_sum` , the sum of the lengths of all consecutive days with weather below the `X` threshold.\n* `spell_blw_X_n`, the number of spells tat satisfy the `X` threshold.\n\nNote that if we had added also days above the threshold we would have got also `spell_abv_X_max` and so on, which refer to consecutive days with weather above the `X` threshold.\n\n\n```{r print_extr_spell_index}\n#| label: print_extr_spell_index\n\nabs_extr_spell_index\nrel_extr_spell_index\n```\n\n## Save\nThe final step of the code is to save the result. In this case, we save it as a `dta` file using the `haven::write_dta()` function. STATA doesn't allow variables name with `.` in it or that start with a number. Therefore, before saving the result we rename the columns with `.`, by removing the dot. This passage is performed by the `dplyr::rename_with()` function.\n\n```{r write_data}\n#| label: write_data\n\nabs_extr_spell_index |>\n  dplyr::rename_with(.fn = ~ gsub(\"\\\\.\", \"\", .x)) |>\n  haven::write_dta(file.path(path_to_data_processed, \"abs_extr_spell_index.dta\"))\n\nrel_extr_spell_index |>\n  dplyr::rename_with(.fn = ~ gsub(\"\\\\.\", \"\", .x)) |>\n  haven::write_dta(file.path(path_to_data_processed, \"rel_extr_spell_index.dta\"))\n\nabs_extr_day_index |>\n  haven::write_dta(file.path(path_to_data_processed, \"abs_extr_day_index.dta\"))\n\nrel_extr_day_index|>\n  haven::write_dta(file.path(path_to_data_processed, \"rel_extr_day_index.dta\"))\n```\n\n# Take home messages\n\n1.  Work with `dta`! We can read `dta` files with `haven::read_dta()` and write files with `haven::write_dta()`. To work with STATA labels check out the `labelled` package.\n\n2.  Prepare the data! There are many repetitions in the data for which we don't need to calculate the weather extremes. We can use the wrapper function `prepare_coord()` to identify the unique locations and to distinguish then with a variable `ID`. \n\n3.  Find the weather extreme events! There are two approaches:\n\n    * Absolute thresholds. They are the same across all location and across all months. They have an easy interpretation as they are linked to biophysical thresholds to define what is extreme. Use the wrapper function `find_abs_ext_day()` to look for extreme days and the function `find_abs_extr_spell()` to look for consecutive occurrences.\n  \n    * Relative thresholds. They are location and monthly specific thresholds. They measures extreme based on the rarity of occurrence and are usually defined as the percentile of the weather distribution. Use the wrapper function `calc_pct_day()` to calculate daily percentiles and the wrapper function `calc_pct_spell()` to calculate the percentiles of consecutive weather events. Based on these percentile we can find the extreme events with the wrapper functions `find_rel_ext_day()` and `find_rel_extr_spell()`.\n\n4. As a final step we need to summaries the weather extreme events into some indicators. For this passage is essential to define the correct reference period with, usually, depends on the date of interview and the interval before the date of interview. Therefore, we need to merge the weather extreme observation with the survey with the wrapper function `merge_with_survey()`. Then the summary passage is carried out by the wrapper function `extr_day_index()` and `extr_spell_index()`, respectively for summarize daily weather extreme events and spell weather extreme events.\n\n# Appendix\n## New to R? Read this first!\n\n### The pipe command\n\nThe pipe command `|>`. It lets you pass the result of one expression as the first argument to the next, creating a fluid chain of functions.\n\n### The package namespaces\n\nThe package namespaces `package_name::function_name()`. As the name suggests, namespaces provide \"spaces\" for \"names\". They provide a context for looking up the value of an object associated with a name. When we write `terra::vect()` we are asking R to look for the function `vect()` in the `terra` package.\n\nIt's a fairly advanced topic, and by-and-large, not that important! When you first start using namespaces, it'll seem like a lot of work for little gain. However, having a high quality namespace helps encapsulate your package and makes it self-contained. This ensures that other packages won't interfere with your code, that your code won't interfere with other packages, and that your package works regardless of the environment in which it's run.\n\nYou can avoid using every time the name space by just loading the necessary packages at the beginning of the code (in the set up section for example). This is the most known and common approach. To do so just add `library(name_of_package)`, for example `library(terra)`. Then we can just call the function without the name space, like this `vect()`.\n\n### The assign operator\n\nThe assign operator `<-`. This is a peculiarity of R and it is used to assign values to variables. Note that the operators `<-` and `=` can be used, almost interchangeably.\n\n## Want to know about the data?\n### Precipitation\nDaily precipitation from Climate Hazards Group InfraRed Precipitation with Station data (CHIRPS)[^1] is a 35+ year quasi-global rainfall data set. Spanning 50°S-50°N (and all longitudes) and ranging from 1981 to near-present, CHIRPS incorporates in-house climatology, CHPclim, 0.05° resolution satellite imagery, and in-situ station data to create gridded rainfall time series for trend analysis and seasonal drought monitoring. \n\nData can be downloaded from [here](https://data.chc.ucsb.edu/products/CHIRPS-2.0/global_monthly/netcdf/) while extra information are available [here](https://www.chc.ucsb.edu/).\n\n[^1]: Funk, C.C., Peterson, P.J., Landsfeld, M.F., Pedreros, D.H., Verdin, J.P., Rowland, J.D., Romero, B.E., Husak, G.J., Michaelsen, J.C., and Verdin, A.P., 2014, A quasi-global precipitation time series for drought monitoring: U.S. Geological Survey Data Series 832, 4 p. http://pubs.usgs.gov/ds/832/\n\n| feature             | value                 |\n|:--------------------|:----------------------|\n| spatial resolution  | 0.05 x 0.05 (\\~ 5 km) |\n| temporal resolution | monthly or daily      |\n| temporal frame      | 1981 - near present   |\n| unit of measure     | mm/day                |\n\n### Surveys\nSuriname Survey of Living Conditions. The 2022 Suriname Survey of Living Conditions is a joint survey made by The Inter-American Development Bank (IDB) and the World Bank. The 2022 Suriname Survey of Living Conditions - administered to a nationally representative sample, which included 7,713 individuals from 2,540 households - was developed to support poverty analysis as well as policy planning and is a helpful tool for policy makers to facilitate fact-based decision making. The survey’s design and execution were financed by the IDB, while the World Bank and IDB are joining forces to analyze data and produce initial findings.\n\nThe Suriname Survey of Living Conditions (SSLC) 2016/17 is an effort of the Inter-American Development Bank (IDB) with the support of the EnergieBedrijvan Suriname’s (state-owned electrical company of Suriname) and the Central Bank of Suriname. It visited about 2,000 households from October 2016 through September 2017 and collected data on the most important dimensions of welfare, which will support evidence-based policy making in areas such as education, health, housing, employment and poverty alleviation. The survey also gathered information on the consumption patterns, income and expenditures of the Surinamese households, intended to update the Consumption Price Index basket and inform the System of National Accounts. \n\nFor extra info look [here](https://openknowledge.worldbank.org/entities/publication/2d0e6975-2f85-4d12-83fa-4f75c617cf89) and [here](https://webapps.ilo.org/surveyLib/index.php/catalog/7499).\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":2,"self-contained":true,"output-file":"sur_fre_weather_extreme.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","author":"JMR","toc-expand":1,"logo":"../images/Climat4Economist_Symbol.png","editor":"source","editor_options":{"chunk_output_type":"console"},"vignette":"%\\VignetteIndexEntry{Vignette's Title} %\\VignetteEncoding{UTF-8} %\\VignetteEngine{quarto::html}\n","toc-location":"right-body","title":"Compute Frequentist Weather Extreme Indicators"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","docx"]}