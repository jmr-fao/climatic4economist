{"title":"Control Variables for the World Bank Project","markdown":{"yaml":{"title":"Control Variables for the World Bank Project","author":"JMR","toc":true,"toc-expand":1,"toc-depth":2,"format":{"html":{"self-contained":true,"code-tools":true,"toc-location":"right-body"},"docx":{"toc-location":"body"}},"editor":"source","editor_options":{"chunk_output_type":"console"},"vignette":"%\\VignetteIndexEntry{Vignette's Title} %\\VignetteEncoding{UTF-8} %\\VignetteEngine{quarto::html}\n"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\nThis tutorial show how too extract spatial control variables based on surveys locations. All the surveys in this tutorial belong to African countries and were obtained by the [The World Bank Living Standards Measurement Study (LSMS)](https://www.worldbank.org/en/programs/lsms).\n\n## Code\n### Set Up\nWe start by setting up the stage for our analysis. \nFirst, we load the necessary packages. We load only `climatic4economist` package that contains several functions meant to extract and merge spatial variables with surveys. During the tutorial we will use other packages but instead of loading all the package at the begging we will call specific function each time.\n\n```{r packages}\n#| label: packages\n\nlibrary(climatic4economist)\n```\n\n\nThen, we defines the paths to reach the surveys and spatial data.\n```{r paths}\n#| label: paths\n\npath_to_data <- file.path(#\"..\",\n                          \"..\", \"data\")\n\npath_to_survey <- file.path(path_to_data, \"survey\", \"AFR\")\n\npath_to_pre <- file.path(path_to_data, \"weather\", \"ERA5_Land\", \"AFR\", \"monthly\",\n                         \"afr_month_50_25_tpr.nc\")\npath_to_tmp <- file.path(path_to_data, \"weather\", \"ERA5_Land\", \"AFR\", \"monthly\",\n                         \"afr_month_50_25_tmp.nc\")\n\npath_to_elevation <- file.path(path_to_data, \"spatial\", \"elevation\", \"GloFAS\",\n                               \"elevation_glofas_v4_0.nc\")\npath_to_urca <- file.path(path_to_data, \"spatial\", \"URCA\",\n                          \"URCA.tif\")\npath_to_pop <- file.path(path_to_data, \"spatial\", \"population\", \"WorldPop\", \"uncontraint_1km_global\")\npath_to_nightlight <- file.path(path_to_data, \"spatial\", \"nighttime_light\", \"VIIRS\")\npath_to_aez <- file.path(path_to_data, \"spatial\", \"AgroEcological\", \"AEZ\", \"GAEZv5\", \n                         \"GAEZ-V5.AEZ33-10km.tif\")\n\npath_to_adm_div <- file.path(path_to_data, \"adm_div\", \"geoBoundaries\")\npath_to_result <- file.path(path_to_data, \"result\")\n```\n\n### Read the Data\n#### Survey Data\nWe start by reading the surveys data. The surveys must have an id that uniquely identifies the household and the coordinates of their interviews.\n\nThe next steps are a bit convoluted. Lets split one by one.\n\n  1. `list.files(path_to_survey, full.names = TRUE)`. The surveys are stored in two files. We use `list.files()` to list the files.\n  2. `lapply(haven::read_dta)`. We use the `lapply()` to apply to each of them the function `haven::read_dta()`. This last function actually read `dta` files into R. The result are two separate block of data, each for each file. They are two separated item within a list. \n  3. Since the data is still split, we need to use again `lapply()` to apply the function `dplyr::select()` to each block. `dplyr::select()` select the columns from a dataset. Which columns? `c(country, hhid, lat, lon, interview_date)`.\n  4. At this point we can bind the two separate data into a single one with the function `dplyr::bind_rows()`. We could have done it before but like this we ensured the two data sets have the same columns.\n  5. Now we want to define the year of each survey and a label for the surveys.\n\n```{r read_survey}\n#| label: read_survey\n\nsrvy_all <- list.files(path_to_survey, full.names = TRUE) |>\n  lapply(haven::read_dta) |>\n  dplyr::bind_rows() |>\n  dplyr::group_by(country) |>\n  dplyr::mutate(interview_date = clock::date_parse(interview_date, format = \"%d/%m/%Y\"),\n                survey_year = clock::get_year(median(interview_date)),\n                survey = paste0(country, substr(survey_year, 3, 4)),\n                survey = gsub(\" \", \"\", survey),\n                .before = hhid)\n\nsurveys <- srvy_all$survey |> unique() |> sort()\nsurveys\n```\n\nWe can keep all the surveys together but the size can be a challenge. Therefore, we split them with the function `dplyr::group_split()`. Now, each survey is a separate block, but they are all stored in the same list.\n\n```{r no_coord_srvy}\n#| label: no_coord_srvy\n\nno_coord_srvy <- c(\"Nigeria18\", \"Tanzania21\", \"Uganda19\")\nsrvy_adm_cntry <- srvy_all |>\n    dplyr::filter(survey %in% no_coord_srvy) |> \n    dplyr::select(-c(ea_id, TA_code, ea_code, \n                     zone_code, city_code, subcity_code)) |>\n    dplyr::mutate(dplyr::across(.cols = dplyr::where(is.character),\n                                .fns = ~ifelse(.x == \"\", NA_character_, .x)),\n                  dplyr::across(.cols = dplyr::where(labelled::is.labelled),\n                                .fns = labelled::to_character)) |>\n    dplyr::group_by(survey) |>\n    dplyr::group_split() |>\n    purrr::map(janitor::remove_empty,\n               which = \"cols\") |>\n    setNames(no_coord_srvy) |> \n  purrr::map(\\(x)  x |> \n               dplyr::mutate(dplyr::across(.cols = dplyr::where(is.character),\n                                           .fns = ~ ifelse(.x == \"\" | grepl(\"CONFI\", .x),\n                                                           NA_character_, .x)) )) |> \n  purrr::map(janitor::remove_empty, which = \"cols\")\n\nsrvy_adm_cntry\n```\n\n```{r ys_coord_srvy}\n#| label: ys_coord_srvy\n\nys_coord_srvy <- setdiff(surveys, no_coord_srvy)\n\nsrvy_coord_cntry <- srvy_all |>\n    dplyr::filter(!is.na(lat) & lat > -999999999) |>\n    dplyr::filter(lat != 0.00000 & lon != 0.00000) |>\n    dplyr::select(c(survey, country, hhid, lat, lon, interview_date)) |>\n    dplyr::group_by(survey) |>\n    dplyr::group_split() |>\n    setNames(ys_coord_srvy)\n\nsrvy_coord_cntry\n```\n\n#### Spatial Data\nTo spatial data is stored as `tiff` file or `nc`. We can read both of them them with the function `terra::rast()`.\n\nNote how all the data sets have the same coordinate reference system (CRS), i.e. `EPSG:4326`. This is important because in this way all the data can \"spatially\" talk to each other.\n\n```{r read_spatial}\n#| label: read_spatial\n\npop <- list.files(path_to_pop , full.names = TRUE) |>\n  lapply(terra::rast) |>\n  setNames(c(\"pop_2018\", \"pop_2019\", \"pop_2020\")) |>\n  terra::rast()\n\nnightlight <- list.files(path_to_nightlight, pattern = \"20[12][891].*tif$\", full.names = TRUE) |>\n  lapply(terra::rast) |>\n  setNames(c(\"nightlight_2018\", \"nightlight_2019\", \"nightlight_2021\")) |>\n  terra::rast()\n\nelevation <- terra::rast(path_to_elevation)\n\nurca <- terra::rast(path_to_urca)\nnames(urca) <- \"urca\"\n\naez <- terra::rast(path_to_aez)\nnames(aez) <- \"aez\"\n\npre <- terra::rast(path_to_pre)\nnames(pre) <- terra::names(pre) |> second_to_date()\n\ntmp <- terra::rast(path_to_tmp)\nnames(tmp) <- terra::names(tmp) |> second_to_date()\n```\n\n#### Administrative Boundaries\nWe now move to read the administrative divisions. We use the function `read_adm_div()` to do so. This function looks for spatial polygons for the `iso` and `lvl` provided provided.\n\nEven if we have the coordinates from the survey, we will extract some spatial variables at the administrative division.\n\n```{r read_adm_div}\n#| label: read_adm_div\n\nadm_div <- read_adm_div(path_to_adm_div,\n                        iso = c(\"BFA\", \"ETH\", \"MLI\", \"MWI\", \"TZA\", \"TGO\", \"UGA\"),\n                        lvl = 2) |>\n  setNames(c(\"BurkinaFaso22\", \"Ethiopia19\", \"Mali22\", \"Malawi19\",\n             \"Togo22\",  \"Tanzania21\", \"Uganda19\"))\n\nNigeria <- read_adm_div(path_to_adm_div,\n                        iso = c(\"NGA\"),\n                        lvl = 1)\nadm_div$Nigeria18 <- Nigeria$NGA\n\nadm_div <- adm_div[sort(names(adm_div))]\n\nadm_div\n\n```\n\n\n### Georeference the Surveys\n```{r georef_coord}\n#| label: georef_coord\n\nsrvy_coord_geo <- srvy_coord_cntry |> \n  purrr::map(terra::vect,\n             geom = c(\"lon\", \"lat\"),\n             crs=\"+proj=longlat +datum=WGS84\") |> \n  purrr::map2(purrr::keep_at(adm_div, ys_coord_srvy),\n              terra::intersect) |> \n  purrr::map(terra::values)\n\n```\n\n```{r georef_adm}\n#| label: georef_adm\n\nsrvy_adm_geo <- srvy_adm_cntry\nsrvy_adm_geo$Nigeria18 <- srvy_adm_cntry$Nigeria18 |> \n  dplyr::mutate(adm_div_1 = stringr::str_to_title(admin2),\n                adm_div_1 = dplyr::case_when(\n                  adm_div_1 == \"Fct\" ~ \"Abuja Federal Capital Territory\",\n                  .default = adm_div_1))\n\nsrvy_adm_geo$Tanzania21 <- srvy_adm_cntry$Tanzania21 |> \n  dplyr::mutate(adm_div_1 = stringr::str_to_title(region_name),\n                adm_div_2 = stringr::str_to_title(district_name),\n                \n                adm_div_1 = dplyr::case_when(\n                  adm_div_1 == \"Dar Es Salaam\" ~ \"Dar es Salaam\",\n                  adm_div_1 == \"Kaskazini Pemba\" ~ \"North Pemba\",\n                  adm_div_1 == \"Kaskazini Unguja\" ~ \"Zanzibar North\",\n                  adm_div_1 == \"Kusini Pemba\" ~ \"South Pemba\",\n                  adm_div_1 == \"Kusini Unguja\" ~ \"Zanzibar South & Central\",\n                  adm_div_1 == \"Mjini Magharibi Unguja\" ~ \"Zanzibar Urban/West\",\n                  # Songwe was created the 2016 from the western half of Mbeya Region\n                  adm_div_1 == \"Songwe\" ~ \"Mbeya\", \n                  \n                  # wrong adm_div based on district\n                  adm_div_2 == \"Masasi Rural\" ~ \"Mtwara\", \n                  adm_div_2 == \"Kigamboni\" ~ \"Dar es Salaam\", \n                  grepl(\"Kahama\", adm_div_2) & adm_div_1 == \"Katavi\" ~ \"Shinyanga\",  # !!!\n                  adm_div_2 == \"Chakechake\" ~ \"South Pemba\", \n                  adm_div_2 == \"Kinondoni\" ~ \"Dar es Salaam\", \n                  adm_div_2 == \"Songea\" ~ \"Ruvuma\",\n                  grepl(\"Songea\", adm_div_2) ~ \"Ruvuma\",\n              \n                  adm_div_2 == \"Ngorongoro\" ~ \"Arusha\", \n                  adm_div_2 == \"Wete\" ~ \"North Pemba\", \n                  adm_div_2 == \"Tandahimba\" ~ \"Mtwara\", \n                  adm_div_2 == \"Babati\" ~ \"Manyara\",\n                  grepl(\"Baba\", adm_div_2) ~ \"Manyara\", # !!!!\n                  grepl(\"Nzega\", adm_div_2) ~ \"Tabora\",\n                  adm_div_2 == \"Makete\" ~ \"Njombe\",\n                  adm_div_2 == \"Mbeya Urban\" ~ \"Mbeya\",\n                  .default = adm_div_1),\n                \n                adm_div_2 = dplyr::case_when(\n                  # adm_div_1  Arusha\n                  adm_div_2 == \"Arusha Rural\" ~ \"Arusha\",\n                  # adm_div_1  Shinyanga\n                  adm_div_2 == \"Kahama Rural\" ~ \"Kahama\",\n                  adm_div_2 == \"Kahama Town\" ~ \"Kahama Township Authority\",\n                  adm_div_2 == \"Shinyanga Rural\" ~ \"Shinyanga\",\n                  adm_div_2 == \"Nzega Town\" ~ \"Nzega\",\n                  # in 2012 by splitting the Kahama District into Msalala and Ushetu\n                  adm_div_2 == \"Msalala\" ~ \"Kahama\",\n                  adm_div_2 == \"Ushetu\" ~ \"Kahama\",\n                  # adm_div_1  Katavi\n                  adm_div_2 == \"Mpanda Rural\" ~ \"Mpanda\",\n                  # established in 2012 from Mlele\n                  adm_div_2 == \"Mpimbwe\" ~ \"Mlele\",\n                  adm_div_2 == \"Nsimbo\" ~ \"Mlele\",\n                  # adm_div_1  Singida\n                  adm_div_2 == \"Singida Rural\" ~ \"Singida\",\n                  # established in 2015 from Manyoni\n                  adm_div_2 == \"Itigi\" ~ \"Manyoni\",\n                  # adm_div_1 Dar es Salaam\n                  # In 2015 Temeke was divided into Temeke and Kigamboni\n                  adm_div_2 == \"Kigamboni\" ~ \"Temeke\",\n                  # Kinondoni should be onlyu the eastern part\n                  adm_div_2 == \"Ubungo\" ~ \"Kinondoni\",\n                  # adm_div_1 Kagera\n                  adm_div_2 == \"Bukoba Rural\" ~ \"Bukoba\",\n                  # adm_div_1 Dodoma\n                  adm_div_2 == \"Kondoa Urban\" ~ \"Kondoa\",\n                  # adm_div_1 Mbeya\n                  adm_div_2 == \"Mbeya Rural\" ~ \"Mbeya\",\n                  adm_div_2 == \"Mbalali\" ~ \"Mbarali\",\n                  # created in 2013, not perfect geo match\n                  adm_div_2 == \"Busokelo\" ~ \"Makete\",\n                  # adm_div_1 Morogoro\n                  adm_div_2 == \"Ifakara Urban\" ~ \"Kilombero\",\n                  adm_div_2 == \"Morogoro Rural\" ~ \"Morogoro\",\n                  # it should be the western part of Ulanga\n                  adm_div_2 == \"Malinyi\" ~ \"Ulanga\",\n                  # adm_div_1 Kigoma\n                  adm_div_2 == \"Kasulu Rural\" ~ \"Kasulu\",\n                  adm_div_2 == \"Kasulu Town\" ~ \"Kasulu Township Authority\",\n                  adm_div_2 == \"Kigoma Rural\" ~ \"Kigoma\",\n                  adm_div_2 == \"Kigoma Ujiji Urban\" ~ \"Kigoma  Urban\",\n                  # adm_div_1 Mtwara\n                  adm_div_2 == \"Masasi Rural\" ~ \"Masasi\",\n                  adm_div_2 == \"Masasi Urban\" ~ \"Masasi  Township Authority\",\n                  adm_div_2 == \"Mtwara Mikindani\" ~ \"Mtwara Urban\",\n                  adm_div_2 == \"Mtwara Rural\" ~ \"Mtwara\",\n                  # adm_div_1 Geita\n                  adm_div_2 == \"Geita Town\" ~ \"Geita\",\n                  # adm_div_1 Mwanza\n                  adm_div_2 == \"Mwanza Urban\" ~ \"Nyamagana\",\n                  # created in 2015, from the eastern part of Sengerema\n                  adm_div_2 == \"Buchosa\" ~ \"Sengerema\",\n                  # adm_div_1 Iringa\n                  adm_div_2 == \"Iringa Rural\" ~ \"Iringa\",\n                  adm_div_2 == \"Mafinga Town\" ~ \"Mafinga Township Authority\",\n                  # adm_div_1 Njombe\n                  adm_div_2 == \"Makambako Town\" ~ \"Makambako Township Authority\",\n                  adm_div_2 == \"Mbeya Urban\" ~ \"Mbeya\",\n                  adm_div_2 == \"Njombe Rural\" ~ \"Njombe\",\n                  adm_div_2 == \"Njombe Town\" ~ \"Njombe Urban\",\n                  # adm_div_1 South Pemba\n                  adm_div_2 == \"Chakechake\" ~ \"Chake Chake\",\n                  # adm_div_1 Lindi\n                  adm_div_2 == \"Lindi Rural\" ~ \"Lindi\",\n                  # adm_div_1 Manyara\n                  adm_div_2 == \"Babati Rural\" ~ \"Babati\",\n                  adm_div_2 == \"Babati Town\" ~ \"Babati UrbanBabati Urban\",\n                  adm_div_2 == \"Mbulu Town\" ~ \"Mbulu\",\n                  # adm_div_1 Mara\n                  adm_div_2 == \"Butiama\" ~ \"Babati\",\n                  adm_div_2 == \"Musoma Rural\" ~ \"Musoma\",\n                  # adm_div_1 Ruvuma\n                  adm_div_2 == \"Songea Rural\" ~ \"Songea\",\n                  # not clear\n                  adm_div_2 == \"Madaba\" ~ \"Songea\",\n                  # adm_div_1 Simiyu\n                  adm_div_2 == \"Bariadi Town\" ~ \"Bariadi\",\n                  # adm_div_1 Rukwa\n                  adm_div_2 == \"Sumbawanga Rural\" ~ \"Sumbawanga\",\n                  # adm_div_1 Pwani\n                  adm_div_2 == \"Kibaha Rural\" ~ \"Kibaha\",\n                  # Should be the eastern part of Rufiji\n                  adm_div_2 == \"Kibiti\" ~ \"Rufiji\",\n                  # created in 2016 from northen part of Bagamoyo \n                  adm_div_2 == \"Chalinze\" ~ \"Bagamoyo\",\n                  # adm_div_1 Tanga\n                  adm_div_2 == \"Korogwe Rural\" ~ \"Korogwe\",\n                  # Created in 2013 from Lushoto\n                  adm_div_2 == \"Bumbuli\" ~ \"Lushoto\",\n                  # adm_div_1 Kilimanjaro\n                  adm_div_2 == \"Moshi Rural\" ~ \"Moshi\",\n                  .default = adm_div_2))\n  \n\nsrvy_adm_geo$Uganda19 <- srvy_adm_cntry$Uganda19 |> \n  dplyr::mutate(adm_div_1 = stringr::str_to_title(region_name),\n                adm_div_2 = stringr::str_to_title(district),\n                adm_div_1 = dplyr::case_when(\n                  adm_div_1 == \"Northern\" ~ \"Northern Region\",\n                  adm_div_1 == \"Eastern\" ~ \"Eastern Region\",\n                  adm_div_1 == \"Central\" ~ \"Central Region\",\n                  adm_div_1 == \"Western\" ~ \"Western Region\",\n                  .default = adm_div_1),\n                adm_div_2 = dplyr::case_when(\n                  # adm_div_1  Northern Region\n                  adm_div_2 == \"Abim\" ~ \"Labwor\",\n                  adm_div_2 == \"Adjumani\" ~ \"East Moyo\",\n                  adm_div_2 == \"Alebtong\" ~ \"Moroto\", #!!!!\n                  adm_div_2 == \"Amolatar\" ~ \"Kioga\",\n                  adm_div_2 == \"Amudat\" ~ \"Pokot\",\n                  adm_div_2 == \"Amuru\" ~ \"Kilak\",\n                  adm_div_2 == \"Apac\" ~ \"Maruzi\",\n                  # poly is split into 4, should be one big Arua district\n                  adm_div_2 == \"Arua\" ~ \"Ayivu\",\n                  # poly is split into 2, Aswa and Omoro\n                  adm_div_2 == \"Gulu\" ~ \"Aswa\",\n                  adm_div_2 == \"Kaabong\" ~ \"Dodoth\",\n                  adm_div_2 == \"Kitgum\" ~ \"Chua\",\n                  adm_div_2 == \"Kotido\" ~ \"Jie\",\n                  adm_div_2 == \"Lira\" ~ \"Erute\",\n                  # poly is split into 2, West Mojo and Obongi\n                  adm_div_2 == \"Moyo\" ~ \"West Moyo\",\n                  adm_div_2 == \"Nabilatuk\" ~ \"Pian\",\n                  adm_div_2 == \"Nakapiripirit\" ~ \"Chekwii\",\n                  adm_div_2 == \"Napak\" ~ \"Bokora\",\n                  # poly is split into 2, Jonam and Padyere\n                  adm_div_2 == \"Nebbi\" ~ \"Padyere\",\n                  adm_div_2 == \"Pakwach\" ~ \"Jonam\",\n                  adm_div_2 == \"Pader\" ~ \"Aruu\",\n                  adm_div_2 == \"Pakwach\" ~ \"Jonam\",\n                  adm_div_2 == \"Yumbe\" ~ \"Aringa\",\n                  adm_div_2 == \"Zombo\" ~ \"Okoro\",\n                  # adm_div_1  Eastern Region\n                  adm_div_2 == \"Bududa\" ~ \"Manjiya\",\n                  adm_div_2 == \"Bugiri\" ~ \"Bukooli\",\n                  adm_div_2 == \"Busia\" ~ \"Samia-Bugwe\",\n                  adm_div_2 == \"Butaleja\" ~ \"Bunyole\",\n                  adm_div_2 == \"Buyende\" ~ \"Budiope\",\n                  # poly is split into 2, Kigulu and Bugweri\n                  adm_div_2 == \"Iganga\" ~ \"Kigulu\",\n                  # poly is split into 2, Kagoma and Butembe\n                  adm_div_2 == \"Jinja\" ~ \"Kagoma\",\n                  adm_div_2 == \"Kaliro\" ~ \"Bulamogi\",\n                  # poly is split into 2, Bugabula and Buzaaya\n                  adm_div_2 == \"Kamuli\" ~ \"Bugabula\",\n                  adm_div_2 == \"Kapchorwa\" ~ \"Tingey\",\n                  adm_div_2 == \"Kapelebyong\" ~ \"Soroti\",\n                  adm_div_2 == \"Katakwi\" ~ \"Usuk\",\n                  adm_div_2 == \"Manafwa\" ~ \"Bungokho\",\n                  adm_div_2 == \"Mayuge\" ~ \"Bunya\",\n                  adm_div_2 == \"Mbale\" ~ \"Bungokho\",\n                  adm_div_2 == \"Namayingo\" ~ \"Bukooli\",\n                  adm_div_2 == \"Namisindwa\" ~ \"Bubulo\",\n                  adm_div_2 == \"Namtumba\" ~ \"Busiki\",\n                  adm_div_2 == \"Namutumba\" ~ \"Busiki\",\n                  adm_div_2 == \"Palisa\" ~ \"Pallisa\",\n                  adm_div_2 == \"Sironko\" ~ \"Budadiri\",\n                  # adm_div_1  Central Region\n                  # poly is split into 2, Busujju and Kyamuswa\n                  adm_div_2 == \"Kalangala\" ~ \"Busujju\",\n                  # poly is split into 2, Bbaale and Ntenjeru\n                  adm_div_2 == \"Kayunga\" ~ \"Bbaale\",\n                  adm_div_2 == \"Kyankwanzi\" ~ \"Kiboga\",\n                  adm_div_2 == \"Luwero\" ~ \"Katikamu\",\n                  # poly is larger, combine Lwengo and Masaka\n                  adm_div_2 == \"Lwengo\" ~ \"Bukuto\",\n                  adm_div_2 == \"Masaka\" ~ \"Bukuto\",\n                  adm_div_2 == \"Lyantonde\" ~ \"Kabula\",\n                  adm_div_2 == \"Mpigi\" ~ \"Mawokota\",\n                  # poly is split into 2, Buwekula and Kassanda\n                  adm_div_2 == \"Mubende\" ~ \"Buwekula\",\n                  # poly is split into 3, Kakuuto, Kyotera, and Kooki\n                  adm_div_2 == \"Rakai\" ~ \"Kakuuto\",\n                  # poly is split into 2, Lwemiyaga and Mawogola\n                  adm_div_2 == \"Ssembabule\" ~ \"Mawogola\",\n                  adm_div_2 == \"Wakiso\" ~ \"Busiro\",\n                  # adm_div_1  Central Region\n                  adm_div_2 == \"Bushenyi\" ~ \"Igara\",\n                  # poly is split into 2, Buhaguzi and Bugahya \n                  adm_div_2 == \"Hoima\" ~ \"Buhaguzi\",\n                  # poly is split into 3, Rubanda, Rukiga, and Ndorwa \n                  adm_div_2 == \"Kabale\" ~ \"Ndorwa\",\n                  adm_div_2 == \"Kabarole\" ~ \"Burahya\",\n                  adm_div_2 == \"Kagadi\" ~ \"Buyaga\",\n                  adm_div_2 == \"Kakumiro\" ~ \"Bugangaizi\",\n                  # poly is split into 2, Kibale and Kitagwenda\n                  adm_div_2 == \"Kamwenge\" ~ \"Kibale\",\n                  adm_div_2 == \"Kanungu\" ~ \"Kinkiizi\",\n                  # poly is split into 2, Busongora and Bukonjo\n                  adm_div_2 == \"Kasese\" ~ \"Busongora\",\n                  # poly is split into 3, Buyaga, Buyanja, and Bugangaizi \n                  adm_div_2 == \"Kibaale\" ~ \"Buyanja\",\n                  adm_div_2 == \"Kikuube\" ~ \"Buhaguzi\",\n                  # poly is split into 2, Nyabushozi and Kazo\n                  adm_div_2 == \"Kiruhura\" ~ \"Nyabushozi\",\n                  adm_div_2 == \"Kisoro\" ~ \"Kibanda\",\n                  adm_div_2 == \"Kiryandongo\" ~ \"Bufumbira\",\n                  adm_div_2 == \"Kyegegwa\" ~ \"Kyaka\",\n                  adm_div_2 == \"Kyenjojo\" ~ \"Mwenge\",\n                  # poly is split into 2, Bujenje and Buruuli\n                  adm_div_2 == \"Masindi\" ~ \"Buruuli\",\n                  # poly is split into 3, Ruhaama, Rwampara and Kashari\n                  adm_div_2 == \"Mbarara\" ~ \"Kashari\",\n                  adm_div_2 == \"Mitooma\" ~ \"Ruhinda\",\n                  # poly is split into 3, Ruhaama, Rwampara and Kashari\n                  adm_div_2 == \"Ntungamo\" ~ \"Ruhaama\",\n                  adm_div_2 == \"Rukingiri\" ~ \"Bujumbura\",\n                  adm_div_2 == \"Rukungiri\" ~ \"Bujumbura\",\n                  .default = adm_div_2))\n\n```\n\n### Crop the spatial variables\nThe spatial variables variables we have just load have a global coverage. It might be convenient to reduce the coverage to just the countries we are interested in. We can do this by using the `terra::crop()` function and the administrative divisions.\n\n```{r crop}\n#| label: crop\n\npop_cntry <- purrr::map(adm_div, \n                        terra::crop,\n                        x = pop,\n                        snap = \"out\")\n\nnghtlght_cntry <- purrr::map(adm_div, \n                             terra::crop,\n                             x = nightlight,\n                             snap = \"out\")\n\nelevation_cntry <- purrr::map(adm_div, \n                              terra::crop,\n                              x = elevation,\n                              snap = \"out\")\n\nurca_cntry <- purrr::map(adm_div, \n                         terra::crop,\n                         x = urca,\n                         snap = \"out\")\n\naez_cntry <- purrr::map(adm_div, \n                        terra::crop,\n                        x = aez,\n                        snap = \"out\")\n\npre_cntry <- purrr::map(adm_div, \n                        terra::crop,\n                        x = pre,\n                        snap = \"out\")\n\ntmp_cntry <- purrr::map(adm_div, \n                        terra::crop,\n                        x = tmp,\n                        snap = \"out\")\n```\n\n### Compute Terrain Indicators\nNow we compute some terrain indicators based on elevation. The terrain indicators are:\n\n* TRI (Terrain Ruggedness Index) is the mean of the absolute differences between the value of a cell and its 8 surrounding cells.\n\n* Slope is the average difference between the value of a cell and its 8 surrounding cells.\n\n* Roughness is the difference between the maximum and the minimum value of a cell and its 8 surrounding cells.\n\n```{r terrain_indicator}\n#| label: terrain_indicator\n\nterrain_cntry <- purrr::map(elevation_cntry,\n                            terra::terrain,\n                            v = c(\"slope\", \"TRI\", \"roughness\"),\n                            neighbors = 8, \n                            unit = \"degrees\")\n```\n\n### Weather Variable Transformation\n```{r transformation}\n#| label: transformation\n\n# From meter to millimeters\npre_cntry_mm <- purrr::map(pre_cntry, ~ .x*1000)\n\n# From Kelvin to Celsius\ntmp_cntry_c <- purrr::map(tmp_cntry, ~ .x - 273.15)\n```\n\n### Extract\n```{r extract}\n#| label: extract\n\nadm_div_area <- adm_div |> \n  purrr::map(\\(x) \n             tidyterra::mutate(x, area_km = terra::expanse(x, unit = \"km\")))\n\npop_adm <- purrr::map2(pop_cntry,\n                       adm_div_area,\n                       extract_by_poly,\n                       fn_agg = \"sum\")\n\nnghtlght_adm <- purrr::map2(nghtlght_cntry,\n                            adm_div,\n                            extract_by_poly,\n                            fn_agg = \"mean\")\n\nelevation_adm <- purrr::map2(elevation_cntry,\n                             adm_div,\n                             extract_by_poly,\n                             fn_agg = \"mean\")\n\nterrain_adm <- purrr::map2(terrain_cntry,\n                           adm_div,\n                           extract_by_poly,\n                           fn_agg = \"mean\")\n\naez_adm <- purrr::map2(aez_cntry,\n                       adm_div,\n                       extract_by_poly,\n                       fn_agg = \"modal\") \n\nurca_adm <- purrr::map2(urca_cntry,\n                        adm_div,\n                        extract_by_poly,\n                        fn_agg = \"modal\")\n\n\n```\n\nFor the extraction of the weather variables, we use another function `extract_cell_by_poly()`. Contrary to the function `extract_by_poly()`, this doesn't aggregate the values within the polygons but extract each all the cell values within the polygon separately. This is useful for us as we want to compute the long run climatic parameters for each cell and only later aggregate at the polygon level.\n\n```{r extract_weather}\n#| label: extract_weather\npre_adm <- purrr::map2(pre_cntry_mm,\n                       adm_div,\n                       extract_cell_by_poly)\n\ntmp_adm <- purrr::map2(tmp_cntry_c,\n                       adm_div,\n                       extract_cell_by_poly)\n```\n\n### Cmpute Long Run Climatic Parameter\nWe want to describe the long run climatic condition in each locations. Rule of thumb is to consider 30 years of weather observation to capture climatic features. We select the 30 years before each survey.\n\n```{r select_by_dates}\n#| label: select_by_dates\n\npre_adm_30yrs <- purrr::pmap(\n  list(pre_adm,\n       list(\"1992\", \"1989\", \"1989\", \"1992\", \"1988\", \"1991\", \"1992\", \"1989\"),\n       list(\"2022\", \"2019\", \"2019\", \"2022\", \"2018\", \"2021\", \"2022\", \"2019\")),\n  select_by_dates)\n\ntmp_adm_30yrs <- purrr::pmap(\n  list(tmp_adm,\n      list(\"1992\", \"1989\", \"1989\", \"1992\", \"1988\", \"1991\", \"1992\", \"1989\"),\n       list(\"2022\", \"2019\", \"2019\", \"2022\", \"2018\", \"2021\", \"2022\", \"2019\")),\n  select_by_dates)\n```\n\nNow we can compute the long run climatic parameter. We calculate the mean, the standard deviation, and the coefficient of variation.\n\n```{r cal_parameter}\n#| label: cal_parameter\n\nparameter <- c(std = ~sd(.x, na.rm = TRUE),\n               avg = ~mean(.x, na.rm = TRUE),\n               coef_var = ~cv(.x, na_rm = TRUE))\n\npre_par <- lapply(pre_adm_30yrs,\n                        calc_par,\n                        agg_fns = parameter,\n                        prefix = \"tpr\") |>\n  lapply(agg_to_adm_div, match_col = \"tpr\")\n\ntmp_par <- lapply(tmp_adm_30yrs,\n                        calc_par,\n                        agg_fns = parameter,\n                        prefix = \"tmp\")|>\n  lapply(agg_to_adm_div, match_col = \"tmp\")\n```\n\nWe have computed the climatic parameters for each cells but we need additional information to assign each cells to the administrative divisions. We take advantage of the column `ID_adm_div` to merge the climatic parameters with the administrative divisions.\n\n```{r finalize_climate_par}\n#| label: finalize_climate_par\npre_par_adm <- purrr::map(adm_div, terra::values) |>\n  purrr::map2(pre_par, merge_by_common)\n\n\ntmp_par_adm <- purrr::map(adm_div, terra::values) |>\n  purrr::map2(tmp_par, merge_by_common)\n\ntmp_par_adm |>\n  purrr::map(head)\n```\n\n### Merge with Survey\nWe start with combining all the extracted variables and by assigning the right year of nighttime light based on the survey year. Note that for the surveys made in 2022 we assign the 2021 data. This is because the data for 2022 and before 2020 are different and it may create some bias.\n\n```{r combine_data}\n#| label: combine_data\n\nsptl_cntrl <- list(pop_adm,\n                   nghtlght_adm,\n                   terrain_adm, \n                   elevation_adm, \n                   urca_adm, \n                   aez_adm, \n                   pre_par_adm, \n                   tmp_par_adm) |>\n  purrr::transpose() |>\n  purrr::map(purrr::reduce, merge_by_common)\n\nsptl_cntrl$BurkinaFaso22 <- sptl_cntrl$BurkinaFaso22 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2019, pop_2018, pop_2019)) |>\n  dplyr::rename(nightlight = nightlight_2021,\n                pop = pop_2020) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n\nsptl_cntrl$Ethiopia19 <- sptl_cntrl$Ethiopia19 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2021, pop_2018, pop_2020)) |>\n  dplyr::rename(nightlight = nightlight_2019,\n                pop = pop_2019) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight)\n\nsptl_cntrl$Malawi19 <- sptl_cntrl$Malawi19 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2021, pop_2018, pop_2020)) |>\n  dplyr::rename(nightlight = nightlight_2019,\n                pop = pop_2019) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n\nsptl_cntrl$Mali22 <- sptl_cntrl$Mali22 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2019, pop_2018, pop_2019)) |>\n  dplyr::rename(nightlight = nightlight_2021,\n                pop = pop_2020) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n\nsptl_cntrl$Nigeria18 <- sptl_cntrl$Nigeria18 |>\n  dplyr::select(-c(nightlight_2021, nightlight_2019, pop_2020, pop_2019)) |>\n  dplyr::rename(nightlight = nightlight_2018,\n                pop = pop_2018) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n\nsptl_cntrl$Tanzania21 <- sptl_cntrl$Tanzania21 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2019, pop_2018, pop_2019)) |>\n  dplyr::rename(nightlight = nightlight_2021,\n                pop = pop_2020) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n\nsptl_cntrl$Togo22 <- sptl_cntrl$Togo22 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2019, pop_2018, pop_2019)) |>\n  dplyr::rename(nightlight = nightlight_2021,\n                pop = pop_2020) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n\nsptl_cntrl$Uganda19 <- sptl_cntrl$Uganda19 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2021, pop_2018, pop_2020)) |>\n  dplyr::rename(nightlight = nightlight_2019,\n                pop = pop_2019) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n```\n\nNow that we have all the control variables together, we can merge them with the surveys information.\n```{r merge_with_survey}\n#| label: merge_with_survey\n\nsrvy_all_geo <- c(srvy_adm_geo, srvy_coord_geo)\nsrvy_all_geo <- srvy_all_geo[sort(names(srvy_all_geo))]\n\ncontrol_hh <- purrr::map2(srvy_all_geo,\n                          sptl_cntrl,\n                          merge_by_common)\n```\n\n### Write\nHere we are at the end, let's save the results.\n\n```{r write}\n#| label: write\n\npurrr::keep_at(control_hh, c(\"BurkinaFaso22\", \"Mali22\", \"Togo22\")) |>\n  dplyr::bind_rows() |>\n  haven::write_dta(file.path(path_to_result, \"EHCVM_sp_adm.dta\"))\n  \npurrr::keep_at(control_hh, c(\"Ethiopia19\", \"Malawi19\", \"Nigeria18\" , \"Tanzania21\", \"Uganda19\")) |>\n  dplyr::bind_rows() |>\n  haven::write_dta(file.path(path_to_result, \"LSMS_sp_adm.dta\"))\n```\n\n","srcMarkdownNoYaml":"\n\n## Introduction\nThis tutorial show how too extract spatial control variables based on surveys locations. All the surveys in this tutorial belong to African countries and were obtained by the [The World Bank Living Standards Measurement Study (LSMS)](https://www.worldbank.org/en/programs/lsms).\n\n## Code\n### Set Up\nWe start by setting up the stage for our analysis. \nFirst, we load the necessary packages. We load only `climatic4economist` package that contains several functions meant to extract and merge spatial variables with surveys. During the tutorial we will use other packages but instead of loading all the package at the begging we will call specific function each time.\n\n```{r packages}\n#| label: packages\n\nlibrary(climatic4economist)\n```\n\n\nThen, we defines the paths to reach the surveys and spatial data.\n```{r paths}\n#| label: paths\n\npath_to_data <- file.path(#\"..\",\n                          \"..\", \"data\")\n\npath_to_survey <- file.path(path_to_data, \"survey\", \"AFR\")\n\npath_to_pre <- file.path(path_to_data, \"weather\", \"ERA5_Land\", \"AFR\", \"monthly\",\n                         \"afr_month_50_25_tpr.nc\")\npath_to_tmp <- file.path(path_to_data, \"weather\", \"ERA5_Land\", \"AFR\", \"monthly\",\n                         \"afr_month_50_25_tmp.nc\")\n\npath_to_elevation <- file.path(path_to_data, \"spatial\", \"elevation\", \"GloFAS\",\n                               \"elevation_glofas_v4_0.nc\")\npath_to_urca <- file.path(path_to_data, \"spatial\", \"URCA\",\n                          \"URCA.tif\")\npath_to_pop <- file.path(path_to_data, \"spatial\", \"population\", \"WorldPop\", \"uncontraint_1km_global\")\npath_to_nightlight <- file.path(path_to_data, \"spatial\", \"nighttime_light\", \"VIIRS\")\npath_to_aez <- file.path(path_to_data, \"spatial\", \"AgroEcological\", \"AEZ\", \"GAEZv5\", \n                         \"GAEZ-V5.AEZ33-10km.tif\")\n\npath_to_adm_div <- file.path(path_to_data, \"adm_div\", \"geoBoundaries\")\npath_to_result <- file.path(path_to_data, \"result\")\n```\n\n### Read the Data\n#### Survey Data\nWe start by reading the surveys data. The surveys must have an id that uniquely identifies the household and the coordinates of their interviews.\n\nThe next steps are a bit convoluted. Lets split one by one.\n\n  1. `list.files(path_to_survey, full.names = TRUE)`. The surveys are stored in two files. We use `list.files()` to list the files.\n  2. `lapply(haven::read_dta)`. We use the `lapply()` to apply to each of them the function `haven::read_dta()`. This last function actually read `dta` files into R. The result are two separate block of data, each for each file. They are two separated item within a list. \n  3. Since the data is still split, we need to use again `lapply()` to apply the function `dplyr::select()` to each block. `dplyr::select()` select the columns from a dataset. Which columns? `c(country, hhid, lat, lon, interview_date)`.\n  4. At this point we can bind the two separate data into a single one with the function `dplyr::bind_rows()`. We could have done it before but like this we ensured the two data sets have the same columns.\n  5. Now we want to define the year of each survey and a label for the surveys.\n\n```{r read_survey}\n#| label: read_survey\n\nsrvy_all <- list.files(path_to_survey, full.names = TRUE) |>\n  lapply(haven::read_dta) |>\n  dplyr::bind_rows() |>\n  dplyr::group_by(country) |>\n  dplyr::mutate(interview_date = clock::date_parse(interview_date, format = \"%d/%m/%Y\"),\n                survey_year = clock::get_year(median(interview_date)),\n                survey = paste0(country, substr(survey_year, 3, 4)),\n                survey = gsub(\" \", \"\", survey),\n                .before = hhid)\n\nsurveys <- srvy_all$survey |> unique() |> sort()\nsurveys\n```\n\nWe can keep all the surveys together but the size can be a challenge. Therefore, we split them with the function `dplyr::group_split()`. Now, each survey is a separate block, but they are all stored in the same list.\n\n```{r no_coord_srvy}\n#| label: no_coord_srvy\n\nno_coord_srvy <- c(\"Nigeria18\", \"Tanzania21\", \"Uganda19\")\nsrvy_adm_cntry <- srvy_all |>\n    dplyr::filter(survey %in% no_coord_srvy) |> \n    dplyr::select(-c(ea_id, TA_code, ea_code, \n                     zone_code, city_code, subcity_code)) |>\n    dplyr::mutate(dplyr::across(.cols = dplyr::where(is.character),\n                                .fns = ~ifelse(.x == \"\", NA_character_, .x)),\n                  dplyr::across(.cols = dplyr::where(labelled::is.labelled),\n                                .fns = labelled::to_character)) |>\n    dplyr::group_by(survey) |>\n    dplyr::group_split() |>\n    purrr::map(janitor::remove_empty,\n               which = \"cols\") |>\n    setNames(no_coord_srvy) |> \n  purrr::map(\\(x)  x |> \n               dplyr::mutate(dplyr::across(.cols = dplyr::where(is.character),\n                                           .fns = ~ ifelse(.x == \"\" | grepl(\"CONFI\", .x),\n                                                           NA_character_, .x)) )) |> \n  purrr::map(janitor::remove_empty, which = \"cols\")\n\nsrvy_adm_cntry\n```\n\n```{r ys_coord_srvy}\n#| label: ys_coord_srvy\n\nys_coord_srvy <- setdiff(surveys, no_coord_srvy)\n\nsrvy_coord_cntry <- srvy_all |>\n    dplyr::filter(!is.na(lat) & lat > -999999999) |>\n    dplyr::filter(lat != 0.00000 & lon != 0.00000) |>\n    dplyr::select(c(survey, country, hhid, lat, lon, interview_date)) |>\n    dplyr::group_by(survey) |>\n    dplyr::group_split() |>\n    setNames(ys_coord_srvy)\n\nsrvy_coord_cntry\n```\n\n#### Spatial Data\nTo spatial data is stored as `tiff` file or `nc`. We can read both of them them with the function `terra::rast()`.\n\nNote how all the data sets have the same coordinate reference system (CRS), i.e. `EPSG:4326`. This is important because in this way all the data can \"spatially\" talk to each other.\n\n```{r read_spatial}\n#| label: read_spatial\n\npop <- list.files(path_to_pop , full.names = TRUE) |>\n  lapply(terra::rast) |>\n  setNames(c(\"pop_2018\", \"pop_2019\", \"pop_2020\")) |>\n  terra::rast()\n\nnightlight <- list.files(path_to_nightlight, pattern = \"20[12][891].*tif$\", full.names = TRUE) |>\n  lapply(terra::rast) |>\n  setNames(c(\"nightlight_2018\", \"nightlight_2019\", \"nightlight_2021\")) |>\n  terra::rast()\n\nelevation <- terra::rast(path_to_elevation)\n\nurca <- terra::rast(path_to_urca)\nnames(urca) <- \"urca\"\n\naez <- terra::rast(path_to_aez)\nnames(aez) <- \"aez\"\n\npre <- terra::rast(path_to_pre)\nnames(pre) <- terra::names(pre) |> second_to_date()\n\ntmp <- terra::rast(path_to_tmp)\nnames(tmp) <- terra::names(tmp) |> second_to_date()\n```\n\n#### Administrative Boundaries\nWe now move to read the administrative divisions. We use the function `read_adm_div()` to do so. This function looks for spatial polygons for the `iso` and `lvl` provided provided.\n\nEven if we have the coordinates from the survey, we will extract some spatial variables at the administrative division.\n\n```{r read_adm_div}\n#| label: read_adm_div\n\nadm_div <- read_adm_div(path_to_adm_div,\n                        iso = c(\"BFA\", \"ETH\", \"MLI\", \"MWI\", \"TZA\", \"TGO\", \"UGA\"),\n                        lvl = 2) |>\n  setNames(c(\"BurkinaFaso22\", \"Ethiopia19\", \"Mali22\", \"Malawi19\",\n             \"Togo22\",  \"Tanzania21\", \"Uganda19\"))\n\nNigeria <- read_adm_div(path_to_adm_div,\n                        iso = c(\"NGA\"),\n                        lvl = 1)\nadm_div$Nigeria18 <- Nigeria$NGA\n\nadm_div <- adm_div[sort(names(adm_div))]\n\nadm_div\n\n```\n\n\n### Georeference the Surveys\n```{r georef_coord}\n#| label: georef_coord\n\nsrvy_coord_geo <- srvy_coord_cntry |> \n  purrr::map(terra::vect,\n             geom = c(\"lon\", \"lat\"),\n             crs=\"+proj=longlat +datum=WGS84\") |> \n  purrr::map2(purrr::keep_at(adm_div, ys_coord_srvy),\n              terra::intersect) |> \n  purrr::map(terra::values)\n\n```\n\n```{r georef_adm}\n#| label: georef_adm\n\nsrvy_adm_geo <- srvy_adm_cntry\nsrvy_adm_geo$Nigeria18 <- srvy_adm_cntry$Nigeria18 |> \n  dplyr::mutate(adm_div_1 = stringr::str_to_title(admin2),\n                adm_div_1 = dplyr::case_when(\n                  adm_div_1 == \"Fct\" ~ \"Abuja Federal Capital Territory\",\n                  .default = adm_div_1))\n\nsrvy_adm_geo$Tanzania21 <- srvy_adm_cntry$Tanzania21 |> \n  dplyr::mutate(adm_div_1 = stringr::str_to_title(region_name),\n                adm_div_2 = stringr::str_to_title(district_name),\n                \n                adm_div_1 = dplyr::case_when(\n                  adm_div_1 == \"Dar Es Salaam\" ~ \"Dar es Salaam\",\n                  adm_div_1 == \"Kaskazini Pemba\" ~ \"North Pemba\",\n                  adm_div_1 == \"Kaskazini Unguja\" ~ \"Zanzibar North\",\n                  adm_div_1 == \"Kusini Pemba\" ~ \"South Pemba\",\n                  adm_div_1 == \"Kusini Unguja\" ~ \"Zanzibar South & Central\",\n                  adm_div_1 == \"Mjini Magharibi Unguja\" ~ \"Zanzibar Urban/West\",\n                  # Songwe was created the 2016 from the western half of Mbeya Region\n                  adm_div_1 == \"Songwe\" ~ \"Mbeya\", \n                  \n                  # wrong adm_div based on district\n                  adm_div_2 == \"Masasi Rural\" ~ \"Mtwara\", \n                  adm_div_2 == \"Kigamboni\" ~ \"Dar es Salaam\", \n                  grepl(\"Kahama\", adm_div_2) & adm_div_1 == \"Katavi\" ~ \"Shinyanga\",  # !!!\n                  adm_div_2 == \"Chakechake\" ~ \"South Pemba\", \n                  adm_div_2 == \"Kinondoni\" ~ \"Dar es Salaam\", \n                  adm_div_2 == \"Songea\" ~ \"Ruvuma\",\n                  grepl(\"Songea\", adm_div_2) ~ \"Ruvuma\",\n              \n                  adm_div_2 == \"Ngorongoro\" ~ \"Arusha\", \n                  adm_div_2 == \"Wete\" ~ \"North Pemba\", \n                  adm_div_2 == \"Tandahimba\" ~ \"Mtwara\", \n                  adm_div_2 == \"Babati\" ~ \"Manyara\",\n                  grepl(\"Baba\", adm_div_2) ~ \"Manyara\", # !!!!\n                  grepl(\"Nzega\", adm_div_2) ~ \"Tabora\",\n                  adm_div_2 == \"Makete\" ~ \"Njombe\",\n                  adm_div_2 == \"Mbeya Urban\" ~ \"Mbeya\",\n                  .default = adm_div_1),\n                \n                adm_div_2 = dplyr::case_when(\n                  # adm_div_1  Arusha\n                  adm_div_2 == \"Arusha Rural\" ~ \"Arusha\",\n                  # adm_div_1  Shinyanga\n                  adm_div_2 == \"Kahama Rural\" ~ \"Kahama\",\n                  adm_div_2 == \"Kahama Town\" ~ \"Kahama Township Authority\",\n                  adm_div_2 == \"Shinyanga Rural\" ~ \"Shinyanga\",\n                  adm_div_2 == \"Nzega Town\" ~ \"Nzega\",\n                  # in 2012 by splitting the Kahama District into Msalala and Ushetu\n                  adm_div_2 == \"Msalala\" ~ \"Kahama\",\n                  adm_div_2 == \"Ushetu\" ~ \"Kahama\",\n                  # adm_div_1  Katavi\n                  adm_div_2 == \"Mpanda Rural\" ~ \"Mpanda\",\n                  # established in 2012 from Mlele\n                  adm_div_2 == \"Mpimbwe\" ~ \"Mlele\",\n                  adm_div_2 == \"Nsimbo\" ~ \"Mlele\",\n                  # adm_div_1  Singida\n                  adm_div_2 == \"Singida Rural\" ~ \"Singida\",\n                  # established in 2015 from Manyoni\n                  adm_div_2 == \"Itigi\" ~ \"Manyoni\",\n                  # adm_div_1 Dar es Salaam\n                  # In 2015 Temeke was divided into Temeke and Kigamboni\n                  adm_div_2 == \"Kigamboni\" ~ \"Temeke\",\n                  # Kinondoni should be onlyu the eastern part\n                  adm_div_2 == \"Ubungo\" ~ \"Kinondoni\",\n                  # adm_div_1 Kagera\n                  adm_div_2 == \"Bukoba Rural\" ~ \"Bukoba\",\n                  # adm_div_1 Dodoma\n                  adm_div_2 == \"Kondoa Urban\" ~ \"Kondoa\",\n                  # adm_div_1 Mbeya\n                  adm_div_2 == \"Mbeya Rural\" ~ \"Mbeya\",\n                  adm_div_2 == \"Mbalali\" ~ \"Mbarali\",\n                  # created in 2013, not perfect geo match\n                  adm_div_2 == \"Busokelo\" ~ \"Makete\",\n                  # adm_div_1 Morogoro\n                  adm_div_2 == \"Ifakara Urban\" ~ \"Kilombero\",\n                  adm_div_2 == \"Morogoro Rural\" ~ \"Morogoro\",\n                  # it should be the western part of Ulanga\n                  adm_div_2 == \"Malinyi\" ~ \"Ulanga\",\n                  # adm_div_1 Kigoma\n                  adm_div_2 == \"Kasulu Rural\" ~ \"Kasulu\",\n                  adm_div_2 == \"Kasulu Town\" ~ \"Kasulu Township Authority\",\n                  adm_div_2 == \"Kigoma Rural\" ~ \"Kigoma\",\n                  adm_div_2 == \"Kigoma Ujiji Urban\" ~ \"Kigoma  Urban\",\n                  # adm_div_1 Mtwara\n                  adm_div_2 == \"Masasi Rural\" ~ \"Masasi\",\n                  adm_div_2 == \"Masasi Urban\" ~ \"Masasi  Township Authority\",\n                  adm_div_2 == \"Mtwara Mikindani\" ~ \"Mtwara Urban\",\n                  adm_div_2 == \"Mtwara Rural\" ~ \"Mtwara\",\n                  # adm_div_1 Geita\n                  adm_div_2 == \"Geita Town\" ~ \"Geita\",\n                  # adm_div_1 Mwanza\n                  adm_div_2 == \"Mwanza Urban\" ~ \"Nyamagana\",\n                  # created in 2015, from the eastern part of Sengerema\n                  adm_div_2 == \"Buchosa\" ~ \"Sengerema\",\n                  # adm_div_1 Iringa\n                  adm_div_2 == \"Iringa Rural\" ~ \"Iringa\",\n                  adm_div_2 == \"Mafinga Town\" ~ \"Mafinga Township Authority\",\n                  # adm_div_1 Njombe\n                  adm_div_2 == \"Makambako Town\" ~ \"Makambako Township Authority\",\n                  adm_div_2 == \"Mbeya Urban\" ~ \"Mbeya\",\n                  adm_div_2 == \"Njombe Rural\" ~ \"Njombe\",\n                  adm_div_2 == \"Njombe Town\" ~ \"Njombe Urban\",\n                  # adm_div_1 South Pemba\n                  adm_div_2 == \"Chakechake\" ~ \"Chake Chake\",\n                  # adm_div_1 Lindi\n                  adm_div_2 == \"Lindi Rural\" ~ \"Lindi\",\n                  # adm_div_1 Manyara\n                  adm_div_2 == \"Babati Rural\" ~ \"Babati\",\n                  adm_div_2 == \"Babati Town\" ~ \"Babati UrbanBabati Urban\",\n                  adm_div_2 == \"Mbulu Town\" ~ \"Mbulu\",\n                  # adm_div_1 Mara\n                  adm_div_2 == \"Butiama\" ~ \"Babati\",\n                  adm_div_2 == \"Musoma Rural\" ~ \"Musoma\",\n                  # adm_div_1 Ruvuma\n                  adm_div_2 == \"Songea Rural\" ~ \"Songea\",\n                  # not clear\n                  adm_div_2 == \"Madaba\" ~ \"Songea\",\n                  # adm_div_1 Simiyu\n                  adm_div_2 == \"Bariadi Town\" ~ \"Bariadi\",\n                  # adm_div_1 Rukwa\n                  adm_div_2 == \"Sumbawanga Rural\" ~ \"Sumbawanga\",\n                  # adm_div_1 Pwani\n                  adm_div_2 == \"Kibaha Rural\" ~ \"Kibaha\",\n                  # Should be the eastern part of Rufiji\n                  adm_div_2 == \"Kibiti\" ~ \"Rufiji\",\n                  # created in 2016 from northen part of Bagamoyo \n                  adm_div_2 == \"Chalinze\" ~ \"Bagamoyo\",\n                  # adm_div_1 Tanga\n                  adm_div_2 == \"Korogwe Rural\" ~ \"Korogwe\",\n                  # Created in 2013 from Lushoto\n                  adm_div_2 == \"Bumbuli\" ~ \"Lushoto\",\n                  # adm_div_1 Kilimanjaro\n                  adm_div_2 == \"Moshi Rural\" ~ \"Moshi\",\n                  .default = adm_div_2))\n  \n\nsrvy_adm_geo$Uganda19 <- srvy_adm_cntry$Uganda19 |> \n  dplyr::mutate(adm_div_1 = stringr::str_to_title(region_name),\n                adm_div_2 = stringr::str_to_title(district),\n                adm_div_1 = dplyr::case_when(\n                  adm_div_1 == \"Northern\" ~ \"Northern Region\",\n                  adm_div_1 == \"Eastern\" ~ \"Eastern Region\",\n                  adm_div_1 == \"Central\" ~ \"Central Region\",\n                  adm_div_1 == \"Western\" ~ \"Western Region\",\n                  .default = adm_div_1),\n                adm_div_2 = dplyr::case_when(\n                  # adm_div_1  Northern Region\n                  adm_div_2 == \"Abim\" ~ \"Labwor\",\n                  adm_div_2 == \"Adjumani\" ~ \"East Moyo\",\n                  adm_div_2 == \"Alebtong\" ~ \"Moroto\", #!!!!\n                  adm_div_2 == \"Amolatar\" ~ \"Kioga\",\n                  adm_div_2 == \"Amudat\" ~ \"Pokot\",\n                  adm_div_2 == \"Amuru\" ~ \"Kilak\",\n                  adm_div_2 == \"Apac\" ~ \"Maruzi\",\n                  # poly is split into 4, should be one big Arua district\n                  adm_div_2 == \"Arua\" ~ \"Ayivu\",\n                  # poly is split into 2, Aswa and Omoro\n                  adm_div_2 == \"Gulu\" ~ \"Aswa\",\n                  adm_div_2 == \"Kaabong\" ~ \"Dodoth\",\n                  adm_div_2 == \"Kitgum\" ~ \"Chua\",\n                  adm_div_2 == \"Kotido\" ~ \"Jie\",\n                  adm_div_2 == \"Lira\" ~ \"Erute\",\n                  # poly is split into 2, West Mojo and Obongi\n                  adm_div_2 == \"Moyo\" ~ \"West Moyo\",\n                  adm_div_2 == \"Nabilatuk\" ~ \"Pian\",\n                  adm_div_2 == \"Nakapiripirit\" ~ \"Chekwii\",\n                  adm_div_2 == \"Napak\" ~ \"Bokora\",\n                  # poly is split into 2, Jonam and Padyere\n                  adm_div_2 == \"Nebbi\" ~ \"Padyere\",\n                  adm_div_2 == \"Pakwach\" ~ \"Jonam\",\n                  adm_div_2 == \"Pader\" ~ \"Aruu\",\n                  adm_div_2 == \"Pakwach\" ~ \"Jonam\",\n                  adm_div_2 == \"Yumbe\" ~ \"Aringa\",\n                  adm_div_2 == \"Zombo\" ~ \"Okoro\",\n                  # adm_div_1  Eastern Region\n                  adm_div_2 == \"Bududa\" ~ \"Manjiya\",\n                  adm_div_2 == \"Bugiri\" ~ \"Bukooli\",\n                  adm_div_2 == \"Busia\" ~ \"Samia-Bugwe\",\n                  adm_div_2 == \"Butaleja\" ~ \"Bunyole\",\n                  adm_div_2 == \"Buyende\" ~ \"Budiope\",\n                  # poly is split into 2, Kigulu and Bugweri\n                  adm_div_2 == \"Iganga\" ~ \"Kigulu\",\n                  # poly is split into 2, Kagoma and Butembe\n                  adm_div_2 == \"Jinja\" ~ \"Kagoma\",\n                  adm_div_2 == \"Kaliro\" ~ \"Bulamogi\",\n                  # poly is split into 2, Bugabula and Buzaaya\n                  adm_div_2 == \"Kamuli\" ~ \"Bugabula\",\n                  adm_div_2 == \"Kapchorwa\" ~ \"Tingey\",\n                  adm_div_2 == \"Kapelebyong\" ~ \"Soroti\",\n                  adm_div_2 == \"Katakwi\" ~ \"Usuk\",\n                  adm_div_2 == \"Manafwa\" ~ \"Bungokho\",\n                  adm_div_2 == \"Mayuge\" ~ \"Bunya\",\n                  adm_div_2 == \"Mbale\" ~ \"Bungokho\",\n                  adm_div_2 == \"Namayingo\" ~ \"Bukooli\",\n                  adm_div_2 == \"Namisindwa\" ~ \"Bubulo\",\n                  adm_div_2 == \"Namtumba\" ~ \"Busiki\",\n                  adm_div_2 == \"Namutumba\" ~ \"Busiki\",\n                  adm_div_2 == \"Palisa\" ~ \"Pallisa\",\n                  adm_div_2 == \"Sironko\" ~ \"Budadiri\",\n                  # adm_div_1  Central Region\n                  # poly is split into 2, Busujju and Kyamuswa\n                  adm_div_2 == \"Kalangala\" ~ \"Busujju\",\n                  # poly is split into 2, Bbaale and Ntenjeru\n                  adm_div_2 == \"Kayunga\" ~ \"Bbaale\",\n                  adm_div_2 == \"Kyankwanzi\" ~ \"Kiboga\",\n                  adm_div_2 == \"Luwero\" ~ \"Katikamu\",\n                  # poly is larger, combine Lwengo and Masaka\n                  adm_div_2 == \"Lwengo\" ~ \"Bukuto\",\n                  adm_div_2 == \"Masaka\" ~ \"Bukuto\",\n                  adm_div_2 == \"Lyantonde\" ~ \"Kabula\",\n                  adm_div_2 == \"Mpigi\" ~ \"Mawokota\",\n                  # poly is split into 2, Buwekula and Kassanda\n                  adm_div_2 == \"Mubende\" ~ \"Buwekula\",\n                  # poly is split into 3, Kakuuto, Kyotera, and Kooki\n                  adm_div_2 == \"Rakai\" ~ \"Kakuuto\",\n                  # poly is split into 2, Lwemiyaga and Mawogola\n                  adm_div_2 == \"Ssembabule\" ~ \"Mawogola\",\n                  adm_div_2 == \"Wakiso\" ~ \"Busiro\",\n                  # adm_div_1  Central Region\n                  adm_div_2 == \"Bushenyi\" ~ \"Igara\",\n                  # poly is split into 2, Buhaguzi and Bugahya \n                  adm_div_2 == \"Hoima\" ~ \"Buhaguzi\",\n                  # poly is split into 3, Rubanda, Rukiga, and Ndorwa \n                  adm_div_2 == \"Kabale\" ~ \"Ndorwa\",\n                  adm_div_2 == \"Kabarole\" ~ \"Burahya\",\n                  adm_div_2 == \"Kagadi\" ~ \"Buyaga\",\n                  adm_div_2 == \"Kakumiro\" ~ \"Bugangaizi\",\n                  # poly is split into 2, Kibale and Kitagwenda\n                  adm_div_2 == \"Kamwenge\" ~ \"Kibale\",\n                  adm_div_2 == \"Kanungu\" ~ \"Kinkiizi\",\n                  # poly is split into 2, Busongora and Bukonjo\n                  adm_div_2 == \"Kasese\" ~ \"Busongora\",\n                  # poly is split into 3, Buyaga, Buyanja, and Bugangaizi \n                  adm_div_2 == \"Kibaale\" ~ \"Buyanja\",\n                  adm_div_2 == \"Kikuube\" ~ \"Buhaguzi\",\n                  # poly is split into 2, Nyabushozi and Kazo\n                  adm_div_2 == \"Kiruhura\" ~ \"Nyabushozi\",\n                  adm_div_2 == \"Kisoro\" ~ \"Kibanda\",\n                  adm_div_2 == \"Kiryandongo\" ~ \"Bufumbira\",\n                  adm_div_2 == \"Kyegegwa\" ~ \"Kyaka\",\n                  adm_div_2 == \"Kyenjojo\" ~ \"Mwenge\",\n                  # poly is split into 2, Bujenje and Buruuli\n                  adm_div_2 == \"Masindi\" ~ \"Buruuli\",\n                  # poly is split into 3, Ruhaama, Rwampara and Kashari\n                  adm_div_2 == \"Mbarara\" ~ \"Kashari\",\n                  adm_div_2 == \"Mitooma\" ~ \"Ruhinda\",\n                  # poly is split into 3, Ruhaama, Rwampara and Kashari\n                  adm_div_2 == \"Ntungamo\" ~ \"Ruhaama\",\n                  adm_div_2 == \"Rukingiri\" ~ \"Bujumbura\",\n                  adm_div_2 == \"Rukungiri\" ~ \"Bujumbura\",\n                  .default = adm_div_2))\n\n```\n\n### Crop the spatial variables\nThe spatial variables variables we have just load have a global coverage. It might be convenient to reduce the coverage to just the countries we are interested in. We can do this by using the `terra::crop()` function and the administrative divisions.\n\n```{r crop}\n#| label: crop\n\npop_cntry <- purrr::map(adm_div, \n                        terra::crop,\n                        x = pop,\n                        snap = \"out\")\n\nnghtlght_cntry <- purrr::map(adm_div, \n                             terra::crop,\n                             x = nightlight,\n                             snap = \"out\")\n\nelevation_cntry <- purrr::map(adm_div, \n                              terra::crop,\n                              x = elevation,\n                              snap = \"out\")\n\nurca_cntry <- purrr::map(adm_div, \n                         terra::crop,\n                         x = urca,\n                         snap = \"out\")\n\naez_cntry <- purrr::map(adm_div, \n                        terra::crop,\n                        x = aez,\n                        snap = \"out\")\n\npre_cntry <- purrr::map(adm_div, \n                        terra::crop,\n                        x = pre,\n                        snap = \"out\")\n\ntmp_cntry <- purrr::map(adm_div, \n                        terra::crop,\n                        x = tmp,\n                        snap = \"out\")\n```\n\n### Compute Terrain Indicators\nNow we compute some terrain indicators based on elevation. The terrain indicators are:\n\n* TRI (Terrain Ruggedness Index) is the mean of the absolute differences between the value of a cell and its 8 surrounding cells.\n\n* Slope is the average difference between the value of a cell and its 8 surrounding cells.\n\n* Roughness is the difference between the maximum and the minimum value of a cell and its 8 surrounding cells.\n\n```{r terrain_indicator}\n#| label: terrain_indicator\n\nterrain_cntry <- purrr::map(elevation_cntry,\n                            terra::terrain,\n                            v = c(\"slope\", \"TRI\", \"roughness\"),\n                            neighbors = 8, \n                            unit = \"degrees\")\n```\n\n### Weather Variable Transformation\n```{r transformation}\n#| label: transformation\n\n# From meter to millimeters\npre_cntry_mm <- purrr::map(pre_cntry, ~ .x*1000)\n\n# From Kelvin to Celsius\ntmp_cntry_c <- purrr::map(tmp_cntry, ~ .x - 273.15)\n```\n\n### Extract\n```{r extract}\n#| label: extract\n\nadm_div_area <- adm_div |> \n  purrr::map(\\(x) \n             tidyterra::mutate(x, area_km = terra::expanse(x, unit = \"km\")))\n\npop_adm <- purrr::map2(pop_cntry,\n                       adm_div_area,\n                       extract_by_poly,\n                       fn_agg = \"sum\")\n\nnghtlght_adm <- purrr::map2(nghtlght_cntry,\n                            adm_div,\n                            extract_by_poly,\n                            fn_agg = \"mean\")\n\nelevation_adm <- purrr::map2(elevation_cntry,\n                             adm_div,\n                             extract_by_poly,\n                             fn_agg = \"mean\")\n\nterrain_adm <- purrr::map2(terrain_cntry,\n                           adm_div,\n                           extract_by_poly,\n                           fn_agg = \"mean\")\n\naez_adm <- purrr::map2(aez_cntry,\n                       adm_div,\n                       extract_by_poly,\n                       fn_agg = \"modal\") \n\nurca_adm <- purrr::map2(urca_cntry,\n                        adm_div,\n                        extract_by_poly,\n                        fn_agg = \"modal\")\n\n\n```\n\nFor the extraction of the weather variables, we use another function `extract_cell_by_poly()`. Contrary to the function `extract_by_poly()`, this doesn't aggregate the values within the polygons but extract each all the cell values within the polygon separately. This is useful for us as we want to compute the long run climatic parameters for each cell and only later aggregate at the polygon level.\n\n```{r extract_weather}\n#| label: extract_weather\npre_adm <- purrr::map2(pre_cntry_mm,\n                       adm_div,\n                       extract_cell_by_poly)\n\ntmp_adm <- purrr::map2(tmp_cntry_c,\n                       adm_div,\n                       extract_cell_by_poly)\n```\n\n### Cmpute Long Run Climatic Parameter\nWe want to describe the long run climatic condition in each locations. Rule of thumb is to consider 30 years of weather observation to capture climatic features. We select the 30 years before each survey.\n\n```{r select_by_dates}\n#| label: select_by_dates\n\npre_adm_30yrs <- purrr::pmap(\n  list(pre_adm,\n       list(\"1992\", \"1989\", \"1989\", \"1992\", \"1988\", \"1991\", \"1992\", \"1989\"),\n       list(\"2022\", \"2019\", \"2019\", \"2022\", \"2018\", \"2021\", \"2022\", \"2019\")),\n  select_by_dates)\n\ntmp_adm_30yrs <- purrr::pmap(\n  list(tmp_adm,\n      list(\"1992\", \"1989\", \"1989\", \"1992\", \"1988\", \"1991\", \"1992\", \"1989\"),\n       list(\"2022\", \"2019\", \"2019\", \"2022\", \"2018\", \"2021\", \"2022\", \"2019\")),\n  select_by_dates)\n```\n\nNow we can compute the long run climatic parameter. We calculate the mean, the standard deviation, and the coefficient of variation.\n\n```{r cal_parameter}\n#| label: cal_parameter\n\nparameter <- c(std = ~sd(.x, na.rm = TRUE),\n               avg = ~mean(.x, na.rm = TRUE),\n               coef_var = ~cv(.x, na_rm = TRUE))\n\npre_par <- lapply(pre_adm_30yrs,\n                        calc_par,\n                        agg_fns = parameter,\n                        prefix = \"tpr\") |>\n  lapply(agg_to_adm_div, match_col = \"tpr\")\n\ntmp_par <- lapply(tmp_adm_30yrs,\n                        calc_par,\n                        agg_fns = parameter,\n                        prefix = \"tmp\")|>\n  lapply(agg_to_adm_div, match_col = \"tmp\")\n```\n\nWe have computed the climatic parameters for each cells but we need additional information to assign each cells to the administrative divisions. We take advantage of the column `ID_adm_div` to merge the climatic parameters with the administrative divisions.\n\n```{r finalize_climate_par}\n#| label: finalize_climate_par\npre_par_adm <- purrr::map(adm_div, terra::values) |>\n  purrr::map2(pre_par, merge_by_common)\n\n\ntmp_par_adm <- purrr::map(adm_div, terra::values) |>\n  purrr::map2(tmp_par, merge_by_common)\n\ntmp_par_adm |>\n  purrr::map(head)\n```\n\n### Merge with Survey\nWe start with combining all the extracted variables and by assigning the right year of nighttime light based on the survey year. Note that for the surveys made in 2022 we assign the 2021 data. This is because the data for 2022 and before 2020 are different and it may create some bias.\n\n```{r combine_data}\n#| label: combine_data\n\nsptl_cntrl <- list(pop_adm,\n                   nghtlght_adm,\n                   terrain_adm, \n                   elevation_adm, \n                   urca_adm, \n                   aez_adm, \n                   pre_par_adm, \n                   tmp_par_adm) |>\n  purrr::transpose() |>\n  purrr::map(purrr::reduce, merge_by_common)\n\nsptl_cntrl$BurkinaFaso22 <- sptl_cntrl$BurkinaFaso22 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2019, pop_2018, pop_2019)) |>\n  dplyr::rename(nightlight = nightlight_2021,\n                pop = pop_2020) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n\nsptl_cntrl$Ethiopia19 <- sptl_cntrl$Ethiopia19 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2021, pop_2018, pop_2020)) |>\n  dplyr::rename(nightlight = nightlight_2019,\n                pop = pop_2019) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight)\n\nsptl_cntrl$Malawi19 <- sptl_cntrl$Malawi19 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2021, pop_2018, pop_2020)) |>\n  dplyr::rename(nightlight = nightlight_2019,\n                pop = pop_2019) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n\nsptl_cntrl$Mali22 <- sptl_cntrl$Mali22 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2019, pop_2018, pop_2019)) |>\n  dplyr::rename(nightlight = nightlight_2021,\n                pop = pop_2020) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n\nsptl_cntrl$Nigeria18 <- sptl_cntrl$Nigeria18 |>\n  dplyr::select(-c(nightlight_2021, nightlight_2019, pop_2020, pop_2019)) |>\n  dplyr::rename(nightlight = nightlight_2018,\n                pop = pop_2018) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n\nsptl_cntrl$Tanzania21 <- sptl_cntrl$Tanzania21 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2019, pop_2018, pop_2019)) |>\n  dplyr::rename(nightlight = nightlight_2021,\n                pop = pop_2020) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n\nsptl_cntrl$Togo22 <- sptl_cntrl$Togo22 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2019, pop_2018, pop_2019)) |>\n  dplyr::rename(nightlight = nightlight_2021,\n                pop = pop_2020) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n\nsptl_cntrl$Uganda19 <- sptl_cntrl$Uganda19 |>\n  dplyr::select(-c(nightlight_2018, nightlight_2021, pop_2018, pop_2020)) |>\n  dplyr::rename(nightlight = nightlight_2019,\n                pop = pop_2019) |>\n  dplyr::mutate(ln_nightlight = log(1+nightlight),\n                .after = nightlight) |>\n  dplyr::mutate(pop_density = pop/area_km,\n                .after = pop)\n```\n\nNow that we have all the control variables together, we can merge them with the surveys information.\n```{r merge_with_survey}\n#| label: merge_with_survey\n\nsrvy_all_geo <- c(srvy_adm_geo, srvy_coord_geo)\nsrvy_all_geo <- srvy_all_geo[sort(names(srvy_all_geo))]\n\ncontrol_hh <- purrr::map2(srvy_all_geo,\n                          sptl_cntrl,\n                          merge_by_common)\n```\n\n### Write\nHere we are at the end, let's save the results.\n\n```{r write}\n#| label: write\n\npurrr::keep_at(control_hh, c(\"BurkinaFaso22\", \"Mali22\", \"Togo22\")) |>\n  dplyr::bind_rows() |>\n  haven::write_dta(file.path(path_to_result, \"EHCVM_sp_adm.dta\"))\n  \npurrr::keep_at(control_hh, c(\"Ethiopia19\", \"Malawi19\", \"Nigeria18\" , \"Tanzania21\", \"Uganda19\")) |>\n  dplyr::bind_rows() |>\n  haven::write_dta(file.path(path_to_result, \"LSMS_sp_adm.dta\"))\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":2,"self-contained":true,"output-file":"afr_sp_adm.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","author":"JMR","toc-expand":1,"logo":"../images/Climat4Economist_Symbol.png","editor":"source","editor_options":{"chunk_output_type":"console"},"vignette":"%\\VignetteIndexEntry{Vignette's Title} %\\VignetteEncoding{UTF-8} %\\VignetteEngine{quarto::html}\n","toc-location":"right-body","title":"Control Variables for the World Bank Project"},"extensions":{"book":{"multiFile":true}}},"docx":{"identifier":{"display-name":"MS Word","target-format":"docx","base-format":"docx"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"docx","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"page-width":6.5},"pandoc":{"default-image-extension":"png","to":"docx","toc":true,"toc-depth":2,"output-file":"afr_sp_adm.docx"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"author":"JMR","toc-expand":1,"logo":"../images/Climat4Economist_Symbol.png","editor":"source","editor_options":{"chunk_output_type":"console"},"vignette":"%\\VignetteIndexEntry{Vignette's Title} %\\VignetteEncoding{UTF-8} %\\VignetteEngine{quarto::html}\n","toc-location":"body","title":"Control Variables for the World Bank Project"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","docx"]}